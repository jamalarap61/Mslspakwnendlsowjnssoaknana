--V1
local Lighting = game:GetService("Lighting")local RunService = game:GetService("RunService")local LocalPlayer = game:GetService("Players").LocalPlayerlocal UserInputService = game:GetService("UserInputService")local TweenService = game:GetService("TweenService")local Camera = game:GetService("Workspace").CurrentCameralocal Mouse = LocalPlayer:GetMouse()local httpService = game:GetService("HttpService")local VirtualUser = game:GetService("VirtualUser")local RenderStepped = RunService.RenderSteppedLocalPlayer.Idled:connect(function()    VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)    wait(1)    VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)end)local ProtectGui = protectgui or (syn and syn.protect_gui) or function(f) endlocal Themes ={Names ={"LimitHub"},    LimitHub ={Name = "LimitHub",        Accent = Color3.fromRGB(75, 0, 130),        AcrylicMain = Color3.fromRGB(20, 20, 30),        AcrylicBorder = Color3.fromRGB(40, 40, 50),        AcrylicGradient = ColorSequence.new(Color3.fromRGB(40, 30, 60), Color3.fromRGB(20, 20, 40)),        AcrylicNoise = 0.8,        TitleBarLine = Color3.fromRGB(100, 90, 130),        Tab = Color3.fromRGB(100, 0, 200),        Element = Color3.fromRGB(40, 30, 60),        ElementBorder = Color3.fromRGB(60, 60, 80),        InElementBorder = Color3.fromRGB(90, 90, 110),        ElementTransparency = 0.75,        ToggleSlider = Color3.fromRGB(120, 0, 200),        ToggleToggled = Color3.fromRGB(255, 255, 255),        SliderRail = Color3.fromRGB(140, 140, 200),        DropdownFrame = Color3.fromRGB(30, 30, 50),        DropdownHolder = Color3.fromRGB(50, 50, 70),        DropdownBorder = Color3.fromRGB(90, 0, 170),        DropdownOption = Color3.fromRGB(120, 0, 220),        Keybind = Color3.fromRGB(110, 0, 200),        Input = Color3.fromRGB(200, 200, 230),        InputFocused = Color3.fromRGB(20, 20, 30),        InputIndicator = Color3.fromRGB(150, 100, 255),        Dialog = Color3.fromRGB(30, 30, 50),        DialogHolder = Color3.fromRGB(45, 45, 65),        DialogHolderLine = Color3.fromRGB(120, 0, 200),        DialogButton = Color3.fromRGB(40, 40, 60),        DialogButtonBorder = Color3.fromRGB(100, 0, 190),        DialogBorder = Color3.fromRGB(80, 80, 100),        DialogInput = Color3.fromRGB(50, 50, 70),        DialogInputLine = Color3.fromRGB(120, 0, 200),        Text = Color3.fromRGB(230, 230, 255),        SubText = Color3.fromRGB(170, 170, 220),        Hover = Color3.fromRGB(140, 0, 230),        HoverChange = 0.08}}local Library ={Version = "4.0.0",OpenFrames ={},Options ={},Themes = Themes.Names,Window = nil,WindowFrame = nil,Unloaded = false,Creator = nil,DialogOpen = false,UseAcrylic = false,Acrylic = false,Transparency = true,MinimizeKeybind = nil,MinimizeKey = Enum.KeyCode.LeftControl,}do local GUI = game:GetService("CoreGui"):FindFirstChild("OpenClose")if GUI then GUI:Destroy()endlocal GUI1 = game:GetService("CoreGui"):FindFirstChild("LimitHubUI")if GUI1 then GUI1:Destroy()endendlocal function CloseOpen()local UIStroke = Instance.new("UIStroke")local UICorner = Instance.new("UICorner")local ScreenGui = Instance.new("ScreenGui")local Close_ImageButton = Instance.new("ImageButton")doProtectGui(ScreenGui)endScreenGui.Name = "OpenClose"ScreenGui.Parent = RunService:IsStudio() and LocalPlayer.PlayerGui or (gethui() or cloneref(game:GetService("CoreGui")) or game:GetService("CoreGui"))ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.SiblingClose_ImageButton.Parent = ScreenGuiClose_ImageButton.BackgroundColor3 = Color3.fromRGB(10, 10, 40)Close_ImageButton.BorderColor3 = Color3.fromRGB(25, 25, 112)Close_ImageButton.Position = UDim2.new(0.1021, 0, 0.0743, 0)Close_ImageButton.Size = UDim2.new(0, 59, 0, 49)Close_ImageButton.Image = "rbxassetid://102794753447548" --98235895490170 | 123767073052336 | 102794753447548Close_ImageButton.Visible = falseUICorner.Name = "MainCorner"UICorner.CornerRadius = UDim.new(0, 9)UICorner.Parent = Close_ImageButtonlocal dragging = falselocal dragStart = nillocal startPos = nillocal function update(input)local delta = input.Position - dragStartClose_ImageButton.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)endClose_ImageButton.InputBegan:Connect(function(input)if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 thendragging = truedragStart = input.PositionstartPos = Close_ImageButton.Positioninput.Changed:Connect(function()if input.UserInputState == Enum.UserInputState.End thendragging = falseendend)endend)Close_ImageButton.InputChanged:Connect(function(input)if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) thenupdate(input)endend)return Close_ImageButtonendlocal Close_ImageButton = CloseOpen()local function isMotor(value)local motorType = tostring(value):match("^Motor%((.+)%)$")if motorType thenreturn true, motorTypeelsereturn falseendendlocal Connection ={}Connection.__index = Connectionfunction Connection.new(signal, handler)return setmetatable({signal = signal,connected = true,_handler = handler,}, Connection)endfunction Connection:disconnect()if self.connected thenself.connected = falsefor index, connection in pairs(self.signal._connections) doif connection == self thentable.remove(self.signal._connections, index)returnendendendendlocal Signal ={}Signal.__index = Signalfunction Signal.new()return setmetatable({_connections ={},_threads ={},}, Signal)endfunction Signal:fire(...)for _, connection in pairs(self._connections) doconnection._handler(...)endfor _, thread in pairs(self._threads) docoroutine.resume(thread, ...)endself._threads ={}endfunction Signal:connect(handler)local connection = Connection.new(self, handler)table.insert(self._connections, connection)return connectionendfunction Signal:wait()table.insert(self._threads, coroutine.running())return coroutine.yield()endlocal Linear ={}Linear.__index = Linearfunction Linear.new(targetValue, options)assert(targetValue, "Missing argument #1:targetValue")options = options or{}return setmetatable({_targetValue = targetValue,_velocity = options.velocity or 1,}, Linear)endfunction Linear:step(state, dt)local position = state.valuelocal velocity = self._velocity -- Linear motion ignores the state's velocitylocal goal = self._targetValuelocal dPos = dt * velocitylocal complete = dPos >= math.abs(goal - position)position = position + dPos * (goal > position and 1 or -1)if complete thenposition = self._targetValuevelocity = 0endreturn{complete = complete,value = position,velocity = velocity,}endlocal Instant ={}Instant.__index = Instantfunction Instant.new(targetValue)return setmetatable({_targetValue = targetValue,}, Instant)endfunction Instant:step()return{complete = true,value = self._targetValue,}endlocal VELOCITY_THRESHOLD = 0.001local POSITION_THRESHOLD = 0.001local EPS = 0.0001local Spring ={}Spring.__index = Springfunction Spring.new(targetValue, options)assert(targetValue, "Missing argument #1:targetValue")options = options or{}return setmetatable({_targetValue = targetValue,_frequency = options.frequency or 4,_dampingRatio = options.dampingRatio or 1,}, Spring)endfunction Spring:step(state, dt)-- Copyright 2018 Parker Stebbins (parker@fractality.io)-- github.com/Fraktality/Spring-- Distributed under the MIT licenselocal d = self._dampingRatiolocal f = self._frequency * 2 * math.pilocal g = self._targetValuelocal p0 = state.valuelocal v0 = state.velocity or 0local offset = p0 - glocal decay = math.exp(-d * f * dt)local p1, v1if d == 1 then -- Critically dampedp1 = (offset * (1 + f * dt) + v0 * dt) * decay + gv1 = (v0 * (1 - f * dt) - offset * (f * f * dt)) * decayelseif d < 1 then -- Underdampedlocal c = math.sqrt(1 - d * d)local i = math.cos(f * c * dt)local j = math.sin(f * c * dt)-- Damping ratios approaching 1 can cause division by small numbers.-- To fix that, group terms around z=j/c and find an approximation for z.-- Start with the definition of z:--    z = sin(dt*f*c)/c-- Substitute a=dt*f:--    z = sin(a*c)/c-- Take the Maclaurin expansion of z with respect to c:--    z = a - (a^3*c^2)/6 + (a^5*c^4)/120 + O(c^6)--    z ≈ a - (a^3*c^2)/6 + (a^5*c^4)/120-- Rewrite in Horner form:--    z ≈ a + ((a*a)*(c*c)*(c*c)/20 - c*c)*(a*a*a)/6local zif c > EPS thenz = j / celselocal a = dt * fz = a + ((a * a) * (c * c) * (c * c) / 20 - c * c) * (a * a * a) / 6end-- Frequencies approaching 0 present a similar problem.-- We want an approximation for y as f approaches 0, where:--    y = sin(dt*f*c)/(f*c)-- Substitute b=dt*c:--    y = sin(b*c)/b-- Now reapply the process from z.local yif f * c > EPS theny = j / (f * c)elselocal b = f * cy = dt + ((dt * dt) * (b * b) * (b * b) / 20 - b * b) * (dt * dt * dt) / 6endp1 = (offset * (i + d * z) + v0 * y) * decay + gv1 = (v0 * (i - z * d) - offset * (z * f)) * decayelse -- Overdampedlocal c = math.sqrt(d * d - 1)local r1 = -f * (d - c)local r2 = -f * (d + c)local co2 = (v0 - offset * r1) / (2 * f * c)local co1 = offset - co2local e1 = co1 * math.exp(r1 * dt)local e2 = co2 * math.exp(r2 * dt)p1 = e1 + e2 + gv1 = e1 * r1 + e2 * r2endlocal complete = math.abs(v1) < VELOCITY_THRESHOLD and math.abs(p1 - g) < POSITION_THRESHOLDreturn{complete = complete,value = complete and g or p1,velocity = v1,}endlocal noop = function() endlocal BaseMotor ={}BaseMotor.__index = BaseMotorfunction BaseMotor.new()return setmetatable({_onStep = Signal.new(),_onStart = Signal.new(),_onComplete = Signal.new(),}, BaseMotor)endfunction BaseMotor:onStep(handler)return self._onStep:connect(handler)endfunction BaseMotor:onStart(handler)return self._onStart:connect(handler)endfunction BaseMotor:onComplete(handler)return self._onComplete:connect(handler)endfunction BaseMotor:start()if not self._connection thenself._connection = RunService.RenderStepped:Connect(function(deltaTime)self:step(deltaTime)end)endendfunction BaseMotor:stop()if self._connection thenself._connection:Disconnect()self._connection = nilendendBaseMotor.destroy = BaseMotor.stopBaseMotor.step = noopBaseMotor.getValue = noopBaseMotor.setGoal = noopfunction BaseMotor:__tostring()return "Motor"endlocal SingleMotor = setmetatable({}, BaseMotor)SingleMotor.__index = SingleMotorfunction SingleMotor.new(initialValue, useImplicitConnections)assert(initialValue, "Missing argument #1:initialValue")assert(typeof(initialValue) == "number", "initialValue must be a number!")local self = setmetatable(BaseMotor.new(), SingleMotor)if useImplicitConnections ~= nil thenself._useImplicitConnections = useImplicitConnectionselseself._useImplicitConnections = trueendself._goal = nilself._state ={complete = true,value = initialValue,}return selfendfunction SingleMotor:step(deltaTime)if self._state.complete thenreturn trueendlocal newState = self._goal:step(self._state, deltaTime)self._state = newStateself._onStep:fire(newState.value)if newState.complete thenif self._useImplicitConnections thenself:stop()endself._onComplete:fire()endreturn newState.completeendfunction SingleMotor:getValue()return self._state.valueendfunction SingleMotor:setGoal(goal)self._state.complete = falseself._goal = goalself._onStart:fire()if self._useImplicitConnections thenself:start()endendfunction SingleMotor:__tostring()return "Motor(Single)"endlocal GroupMotor = setmetatable({}, BaseMotor)GroupMotor.__index = GroupMotorlocal function toMotor(value)if isMotor(value) thenreturn valueendlocal valueType = typeof(value)if valueType == "number" thenreturn SingleMotor.new(value, false)elseif valueType == "table" thenreturn GroupMotor.new(value, false)enderror(("Unable to convert %q to motor;type %s is unsupported"):format(value, valueType), 2)endfunction GroupMotor.new(initialValues, useImplicitConnections)assert(initialValues, "Missing argument #1:initialValues")assert(typeof(initialValues) == "table", "initialValues must be a table!")assert(not initialValues.step,'initialValues contains disallowed property "step". Did you mean to put a table of values here?')local self = setmetatable(BaseMotor.new(), GroupMotor)if useImplicitConnections ~= nil thenself._useImplicitConnections = useImplicitConnectionselseself._useImplicitConnections = trueendself._complete = trueself._motors ={}for key, value in pairs(initialValues) doself._motors[key] = toMotor(value)endreturn selfendfunction GroupMotor:step(deltaTime)if self._complete thenreturn trueendlocal allMotorsComplete = truefor _, motor in pairs(self._motors) dolocal complete = motor:step(deltaTime)if not complete then-- If any of the sub-motors are incomplete, the group motor will not be complete eitherallMotorsComplete = falseendendself._onStep:fire(self:getValue())if allMotorsComplete thenif self._useImplicitConnections thenself:stop()endself._complete = trueself._onComplete:fire()endreturn allMotorsCompleteendfunction GroupMotor:setGoal(goals)assert(not goals.step, 'goals contains disallowed property "step". Did you mean to put a table of goals here?')self._complete = falseself._onStart:fire()for key, goal in pairs(goals) dolocal motor = assert(self._motors[key], ("Unknown motor for key %s"):format(key))motor:setGoal(goal)endif self._useImplicitConnections thenself:start()endendfunction GroupMotor:getValue()local values ={}for key, motor in pairs(self._motors) dovalues[key] = motor:getValue()endreturn valuesendfunction GroupMotor:__tostring()return "Motor(Group)"endlocal Flipper ={SingleMotor = SingleMotor,GroupMotor = GroupMotor,Instant = Instant,Linear = Linear,Spring = Spring,isMotor = isMotor,}local Creator ={Registry ={},Signals ={},TransparencyMotors ={},DefaultProperties ={ScreenGui ={ResetOnSpawn = false,ZIndexBehavior = Enum.ZIndexBehavior.Sibling,},Frame ={BackgroundColor3 = Color3.new(1, 1, 1),BorderColor3 = Color3.new(0, 0, 0),BorderSizePixel = 0,},ScrollingFrame ={BackgroundColor3 = Color3.new(1, 1, 1),BorderColor3 = Color3.new(0, 0, 0),ScrollBarImageColor3 = Color3.new(0, 0, 0),},TextLabel ={BackgroundColor3 = Color3.new(1, 1, 1),BorderColor3 = Color3.new(0, 0, 0),Font = Enum.Font.SourceSans,Text = "",TextColor3 = Color3.new(0, 0, 0),BackgroundTransparency = 1,TextSize = 14,},TextButton ={BackgroundColor3 = Color3.new(1, 1, 1),BorderColor3 = Color3.new(0, 0, 0),AutoButtonColor = false,Font = Enum.Font.SourceSans,Text = "",TextColor3 = Color3.new(0, 0, 0),TextSize = 14,},TextBox ={BackgroundColor3 = Color3.new(1, 1, 1),BorderColor3 = Color3.new(0, 0, 0),ClearTextOnFocus = false,Font = Enum.Font.SourceSans,Text = "",TextColor3 = Color3.new(0, 0, 0),TextSize = 14,},ImageLabel ={BackgroundTransparency = 1,BackgroundColor3 = Color3.new(1, 1, 1),BorderColor3 = Color3.new(0, 0, 0),BorderSizePixel = 0,},ImageButton ={BackgroundColor3 = Color3.new(1, 1, 1),BorderColor3 = Color3.new(0, 0, 0),AutoButtonColor = false,},CanvasGroup ={BackgroundColor3 = Color3.new(1, 1, 1),BorderColor3 = Color3.new(0, 0, 0),BorderSizePixel = 0,},},}local function ApplyCustomProps(Object, Props)if Props.ThemeTag thenCreator.AddThemeObject(Object, Props.ThemeTag)endendfunction Creator.AddSignal(Signal, Function)local Connected = Signal:Connect(Function)table.insert(Creator.Signals, Connected)return Connectedendfunction Creator.Disconnect()for Idx = #Creator.Signals, 1, -1 dolocal Connection = table.remove(Creator.Signals, Idx)if Connection.Disconnect thenConnection:Disconnect()endendendfunction Creator.UpdateTheme()for Instance, Object in next, Creator.Registry dofor Property, ColorIdx in next, Object.Properties doInstance[Property] = Creator.GetThemeProperty(ColorIdx)endendfor _, Motor in next, Creator.TransparencyMotors doMotor:setGoal(Flipper.Instant.new(Creator.GetThemeProperty("ElementTransparency")))endendfunction Creator.AddThemeObject(Object, Properties)local Idx = #Creator.Registry + 1local Data ={Object = Object,Properties = Properties,Idx = Idx,}Creator.Registry[Object] = DataCreator.UpdateTheme()return Objectendfunction Creator.OverrideTag(Object, Properties)Creator.Registry[Object].Properties = Properties--Creator.UpdateTheme()endfunction Creator.GetThemeProperty(Property)if Themes[Library.Theme][Property] thenreturn Themes[Library.Theme][Property]endreturn Themes["LimitHub"][Property]endfunction Creator.New(Name, Properties, Children)local Object = Instance.new(Name)-- Default propertiesfor Name, Value in next, Creator.DefaultProperties[Name] or{}doObject[Name] = Valueend-- Propertiesfor Name, Value in next, Properties or{}doif Name ~= "ThemeTag" thenObject[Name] = Valueendend-- Childrenfor _, Child in next, Children or{}doChild.Parent = ObjectendApplyCustomProps(Object, Properties)return Objectendfunction Creator.SpringMotor(Initial, Instance, Prop, IgnoreDialogCheck, ResetOnThemeChange)IgnoreDialogCheck = IgnoreDialogCheck or falseResetOnThemeChange = ResetOnThemeChange or falselocal Motor = Flipper.SingleMotor.new(Initial)Motor:onStep(function(value)Instance[Prop] = valueend)if ResetOnThemeChange thentable.insert(Creator.TransparencyMotors, Motor)endlocal function SetValue(Value, Ignore)Ignore = Ignore or falseif not IgnoreDialogCheck thenif not Ignore thenif Prop == "BackgroundTransparency" and Library.DialogOpen thenreturnendendendMotor:setGoal(Flipper.Spring.new(Value,{frequency = 8}))endreturn Motor, SetValueendLibrary.Creator = Creatorlocal New = Creator.Newlocal GUI = New("ScreenGui",{Name = "LimitHubUI",Parent = RunService:IsStudio() and LocalPlayer.PlayerGui or (gethui() or cloneref(game:GetService("CoreGui")) or game:GetService("CoreGui")),})doLibrary.GUI = GUIProtectGui(GUI)endfunction Library:SafeCallback(Function, ...)if not Function thenreturnendlocal Success, Event = pcall(Function, ...)if not Success thenlocal _, i = Event:find(":%d+:")if not i thenreturn Library:Notify({Title = "Interface",Content = "Callback error",SubContent = Event,Duration = 5,})endreturn Library:Notify({Title = "Interface",Content = "Callback error",SubContent = Event:sub(i + 1),Duration = 5,})endendfunction Library:Round(Number, Factor)if Factor == 0 thenreturn math.floor(Number)endNumber = tostring(Number)return Number:find("%.") and tonumber(Number:sub(1, Number:find("%.") + Factor)) or Numberendlocal function map(value, inMin, inMax, outMin, outMax)return (value - inMin) * (outMax - outMin) / (inMax - inMin) + outMinendlocal function viewportPointToWorld(location, distance)local unitRay = game:GetService("Workspace").CurrentCamera:ScreenPointToRay(location.X, location.Y)return unitRay.Origin + unitRay.Direction * distanceendlocal function getOffset()local viewportSizeY = game:GetService("Workspace").CurrentCamera.ViewportSize.Yreturn map(viewportSizeY, 0, 2560, 8, 56)endlocal viewportPointToWorld, getOffset = unpack({viewportPointToWorld, getOffset})local BlurFolder = Instance.new("Folder", game:GetService("Workspace").CurrentCamera)local function createAcrylic()local Part = Creator.New("Part",{Name = "Body",Color = Color3.new(0, 0, 0),Material = Enum.Material.Glass,Size = Vector3.new(1, 1, 0),Anchored = true,CanCollide = false,Locked = true,CastShadow = false,Transparency = 0.98,},{Creator.New("SpecialMesh",{MeshType = Enum.MeshType.Brick,Offset = Vector3.new(0, 0, -0.000001),}),})return Partendfunction AcrylicBlur()local function createAcrylicBlur(distance)local cleanups ={}distance = distance or 0.001local positions ={topLeft = Vector2.new(),topRight = Vector2.new(),bottomRight = Vector2.new(),}local model = createAcrylic()model.Parent = BlurFolderlocal function updatePositions(size, position)positions.topLeft = positionpositions.topRight = position + Vector2.new(size.X, 0)positions.bottomRight = position + sizeendlocal function render()local res = game:GetService("Workspace").CurrentCameraif res thenres = res.CFrameendlocal cond = resif not cond thencond = CFrame.new()endlocal camera = condlocal topLeft = positions.topLeftlocal topRight = positions.topRightlocal bottomRight = positions.bottomRightlocal topLeft3D = viewportPointToWorld(topLeft, distance)local topRight3D = viewportPointToWorld(topRight, distance)local bottomRight3D = viewportPointToWorld(bottomRight, distance)local width = (topRight3D - topLeft3D).Magnitudelocal height = (topRight3D - bottomRight3D).Magnitudemodel.CFrame =CFrame.fromMatrix((topLeft3D + bottomRight3D) / 2, camera.XVector, camera.YVector, camera.ZVector)model.Mesh.Scale = Vector3.new(width, height, 0)endlocal function onChange(rbx)local offset = getOffset()local size = rbx.AbsoluteSize - Vector2.new(offset, offset)local position = rbx.AbsolutePosition + Vector2.new(offset / 2, offset / 2)updatePositions(size, position)task.spawn(render)endlocal function renderOnChange()local camera = game:GetService("Workspace").CurrentCameraif not camera thenreturnendtable.insert(cleanups, camera:GetPropertyChangedSignal("CFrame"):Connect(render))table.insert(cleanups, camera:GetPropertyChangedSignal("ViewportSize"):Connect(render))table.insert(cleanups, camera:GetPropertyChangedSignal("FieldOfView"):Connect(render))task.spawn(render)endmodel.Destroying:Connect(function()for _, item in cleanups dopcall(function()item:Disconnect()end)endend)renderOnChange()return onChange, modelendreturn function(distance)local Blur ={}local onChange, model = createAcrylicBlur(distance)local comp = Creator.New("Frame",{BackgroundTransparency = 1,Size = UDim2.fromScale(1, 1),})Creator.AddSignal(comp:GetPropertyChangedSignal("AbsolutePosition"), function()onChange(comp)end)Creator.AddSignal(comp:GetPropertyChangedSignal("AbsoluteSize"), function()onChange(comp)end)Blur.AddParent = function(Parent)Creator.AddSignal(Parent:GetPropertyChangedSignal("Visible"), function()Blur.SetVisibility(Parent.Visible)end)endBlur.SetVisibility = function(Value)model.Transparency = Value and 0.98 or 1endBlur.Frame = compBlur.Model = modelreturn Blurendendfunction AcrylicPaint()local New = Creator.Newlocal AcrylicBlur = AcrylicBlur()return function(props)local AcrylicPaint ={}AcrylicPaint.Frame = New("Frame",{Size = UDim2.fromScale(1, 1),BackgroundTransparency = 0.9,BackgroundColor3 = Color3.fromRGB(255, 255, 255),BorderSizePixel = 0,},{New("ImageLabel",{Image = "rbxassetid://8992230677",ScaleType = "Slice",SliceCenter = Rect.new(Vector2.new(99, 99), Vector2.new(99, 99)),AnchorPoint = Vector2.new(0.5, 0.5),Size = UDim2.new(1, 120, 1, 116),Position = UDim2.new(0.5, 0, 0.5, 0),BackgroundTransparency = 1,ImageColor3 = Color3.fromRGB(0, 0, 0),ImageTransparency = 0.7,}),New("UICorner",{CornerRadius = UDim.new(0, 8),}),New("Frame",{BackgroundTransparency = 0.45,Size = UDim2.fromScale(1, 1),Name = "Background",ThemeTag ={BackgroundColor3 = "AcrylicMain",},},{New("UICorner",{CornerRadius = UDim.new(0, 8),}),}),New("Frame",{BackgroundColor3 = Color3.fromRGB(255, 255, 255),BackgroundTransparency = 0.4,Size = UDim2.fromScale(1, 1),},{New("UICorner",{CornerRadius = UDim.new(0, 8),}),New("UIGradient",{Rotation = 90,ThemeTag ={Color = "AcrylicGradient",},}),}),New("ImageLabel",{Image = "rbxassetid://9968344105",ImageTransparency = 0.98,ScaleType = Enum.ScaleType.Tile,TileSize = UDim2.new(0, 128, 0, 128),Size = UDim2.fromScale(1, 1),BackgroundTransparency = 1,},{New("UICorner",{CornerRadius = UDim.new(0, 8),}),}),New("ImageLabel",{Image = "rbxassetid://9968344227",ImageTransparency = 0.9,ScaleType = Enum.ScaleType.Tile,TileSize = UDim2.new(0, 128, 0, 128),Size = UDim2.fromScale(1, 1),BackgroundTransparency = 1,ThemeTag ={ImageTransparency = "AcrylicNoise",},},{New("UICorner",{CornerRadius = UDim.new(0, 8),}),}),New("Frame",{BackgroundTransparency = 1,Size = UDim2.fromScale(1, 1),ZIndex = 2,},{New("UICorner",{CornerRadius = UDim.new(0, 8),}),New("UIStroke",{Transparency = 0.5,Thickness = 1,ThemeTag ={Color = "AcrylicBorder",},}),}),})local Blurif Library.UseAcrylic thenBlur = AcrylicBlur()Blur.Frame.Parent = AcrylicPaint.FrameAcrylicPaint.Model = Blur.ModelAcrylicPaint.AddParent = Blur.AddParentAcrylicPaint.SetVisibility = Blur.SetVisibilityendreturn AcrylicPaintendendlocal Acrylic ={AcrylicBlur = AcrylicBlur(),CreateAcrylic = createAcrylic,AcrylicPaint = AcrylicPaint(),}function Acrylic.init()local baseEffect = Instance.new("DepthOfFieldEffect")baseEffect.FarIntensity = 0baseEffect.InFocusRadius = 0.1baseEffect.NearIntensity = 1local depthOfFieldDefaults ={}function Acrylic.Enable()for _, effect in pairs(depthOfFieldDefaults) doeffect.Enabled = falseendbaseEffect.Parent = game:GetService("Lighting")endfunction Acrylic.Disable()for _, effect in pairs(depthOfFieldDefaults) doeffect.Enabled = effect.enabledendbaseEffect.Parent = nilendlocal function registerDefaults()local function register(object)if object:IsA("DepthOfFieldEffect") thendepthOfFieldDefaults[object] ={enabled = object.Enabled}endendfor _, child in pairs(game:GetService("Lighting"):GetChildren()) doregister(child)endif game:GetService("Workspace").CurrentCamera thenfor _, child in pairs(game:GetService("Workspace").CurrentCamera:GetChildren()) doregister(child)endendendregisterDefaults()Acrylic.Enable()endlocal Components ={Assets ={Close = "rbxassetid://9886659671",Min = "rbxassetid://9886659276",Max = "rbxassetid://9886659406",Restore = "rbxassetid://9886659001",},}Components.Element = (function()local New = Creator.Newlocal Spring = Flipper.Spring.newreturn function(Title, Desc, Parent, Hover, Options)local Element ={}local Options = Options or{}Element.TitleLabel = New("TextLabel",{FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Medium, Enum.FontStyle.Normal),Text = Title,TextColor3 = Color3.fromRGB(240, 240, 240),TextSize = 13,TextXAlignment = Enum.TextXAlignment.Left,Size = UDim2.new(1, 0, 0, 14),BackgroundColor3 = Color3.fromRGB(255, 255, 255),BackgroundTransparency = 1,ThemeTag ={TextColor3 = "Text",},})Element.DescLabel = New("TextLabel",{FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json"),Text = Desc,TextColor3 = Color3.fromRGB(200, 200, 200),TextSize = 12,TextWrapped = true,TextXAlignment = Enum.TextXAlignment.Left,BackgroundColor3 = Color3.fromRGB(255, 255, 255),AutomaticSize = Enum.AutomaticSize.Y,BackgroundTransparency = 1,Size = UDim2.new(1, 0, 0, 14),ThemeTag ={TextColor3 = "SubText",},})Element.LabelHolder = New("Frame",{AutomaticSize = Enum.AutomaticSize.Y,BackgroundColor3 = Color3.fromRGB(255, 255, 255),BackgroundTransparency = 1,Position = UDim2.fromOffset(10, 0),Size = UDim2.new(1, -28, 0, 0),},{New("UIListLayout",{SortOrder = Enum.SortOrder.LayoutOrder,VerticalAlignment = Enum.VerticalAlignment.Center,}),New("UIPadding",{PaddingBottom = UDim.new(0, 13),PaddingTop = UDim.new(0, 13),}),Element.TitleLabel,Element.DescLabel,})Element.Border = New("UIStroke",{Transparency = 0.5,ApplyStrokeMode = Enum.ApplyStrokeMode.Border,Color = Color3.fromRGB(0, 0, 0),ThemeTag ={Color = "ElementBorder",},})Element.Frame = New("TextButton",{Visible = Options.Visible and Options.Visible or true,Size = UDim2.new(1, 0, 0, 0),BackgroundTransparency = 0.89,BackgroundColor3 = Color3.fromRGB(130, 130, 130),Parent = Parent,AutomaticSize = Enum.AutomaticSize.Y,Text = "",LayoutOrder = 7,ThemeTag ={BackgroundColor3 = "Element",BackgroundTransparency = "ElementTransparency",},},{New("UICorner",{CornerRadius = UDim.new(0, 4),}),Element.Border,Element.LabelHolder,})function Element:SetTitle(Set)Element.TitleLabel.Text = Setendfunction Element:Visible(Bool)Element.Frame.Visible = Boolendfunction Element:SetDesc(set)set = set or ""Element.DescLabel.Visible = (set ~= "")Element.DescLabel.Text = setendfunction Element:GetTitle()return Element.TitleLabel.Textendfunction Element:GetDesc()return Element.DescLabel.Textendfunction Element:Destroy()Element.Frame:Destroy()endElement:SetTitle(Title)Element:SetDesc(Desc)if Hover thenlocal Themes = Library.Themeslocal Motor, SetTransparency = Creator.SpringMotor(Creator.GetThemeProperty("ElementTransparency"),Element.Frame,"BackgroundTransparency",false,true)Creator.AddSignal(Element.Frame.MouseEnter, function()SetTransparency(Creator.GetThemeProperty("ElementTransparency") - Creator.GetThemeProperty("HoverChange"))end)Creator.AddSignal(Element.Frame.MouseLeave, function()SetTransparency(Creator.GetThemeProperty("ElementTransparency"))end)Creator.AddSignal(Element.Frame.MouseButton1Down, function()SetTransparency(Creator.GetThemeProperty("ElementTransparency") + Creator.GetThemeProperty("HoverChange"))end)Creator.AddSignal(Element.Frame.MouseButton1Up, function()SetTransparency(Creator.GetThemeProperty("ElementTransparency") - Creator.GetThemeProperty("HoverChange"))end)endreturn Elementendend)()-- Clean & Fixed Section Collapse Code-- Clean & Fixed Section Collapse Code with UIListLayout to avoid overlapComponents.Section = function(Title, Parent)    local function getArrowIcon(down)        return down and "rbxassetid://133100716818074" or "rbxassetid://113579468649658"    end    local Section ={}Section.Layout = Creator.New("UIListLayout",{Padding = UDim.new(0, 5),        SortOrder = Enum.SortOrder.LayoutOrder})    Section.Container = Creator.New("Frame",{Size = UDim2.new(1, 0, 0, 0),        BackgroundTransparency = 1,        AutomaticSize = Enum.AutomaticSize.Y,        Visible = false,        Name = "Content"},{Section.Layout})    Section.CollapseButton = Creator.New("ImageButton",{Size = UDim2.fromOffset(18, 18),        Position = UDim2.new(1, -10, 0.5, 0),        AnchorPoint = Vector2.new(1, 0.5),        BackgroundTransparency = 1,        Image = getArrowIcon(true),        ImageColor3 = Color3.fromRGB(140, 0, 230),        ZIndex = 2,        Name = "CollapseArrow"})    Section.TitleLabel = Creator.New("TextLabel",{Text = Title,        RichText = true,        TextTransparency = 0,        FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal),        TextSize = 18,        TextXAlignment = Enum.TextXAlignment.Left,        TextYAlignment = Enum.TextYAlignment.Center,        AnchorPoint = Vector2.new(0, 0.5),        Position = UDim2.new(0, 10, 0.5, 0),        Size = UDim2.new(1, -40, 0, 20),        BackgroundTransparency = 1,        TextColor3 = Color3.fromRGB(230, 230, 255),        Name = "SectionTitle"})    Section.Header = Creator.New("Frame",{Size = UDim2.new(1, 0, 0, 32),        BackgroundTransparency = 1,        Name = "Header"},{Section.TitleLabel,        Section.CollapseButton})    Section.RootLayout = Creator.New("UIListLayout",{Padding = UDim.new(0, 0),        SortOrder = Enum.SortOrder.LayoutOrder})    Section.Root = Creator.New("Frame",{BackgroundTransparency = 0.05,        BackgroundColor3 = Color3.fromRGB(40, 30, 60),        Size = UDim2.new(1, 0, 0, 32),        LayoutOrder = 7,        Parent = Parent,        ClipsDescendants = true,        Name = "SectionRoot"},{Section.RootLayout,        Creator.New("UICorner",{CornerRadius = UDim.new(0, 6)}),        Creator.New("UIStroke",{ApplyStrokeMode = Enum.ApplyStrokeMode.Border,            Color = Color3.fromRGB(90, 0, 170),            Transparency = 0.4}),        Section.Header,        Section.Container})    Section.Collapsed = true    local function collapse()        Section.Collapsed = true        Section.Container.Visible = false        Section.Root.Size = UDim2.new(1, 0, 0, 32)        Section.CollapseButton.Image = getArrowIcon(false)    end    local function expand()        Section.Collapsed = false        Section.Container.Visible = true        Section.Container.Size = UDim2.new(1, 0, 0, Section.Layout.AbsoluteContentSize.Y)        Section.Root.Size = UDim2.new(1, 0, 0, Section.Layout.AbsoluteContentSize.Y + 32)        Section.CollapseButton.Image = getArrowIcon(true)    end    Section.CollapseButton.MouseButton1Click:Connect(function()        if Section.Collapsed then            expand()        else            collapse()        end    end)    Creator.AddSignal(Section.Layout:GetPropertyChangedSignal("AbsoluteContentSize"), function()        if not Section.Collapsed then            Section.Container.Size = UDim2.new(1, 0, 0, Section.Layout.AbsoluteContentSize.Y)            Section.Root.Size = UDim2.new(1, 0, 0, Section.Layout.AbsoluteContentSize.Y + 32)        end    end)    collapse()    return SectionendComponents.Tab = (function()local New = Creator.Newlocal Spring = Flipper.Spring.newlocal Instant = Flipper.Instant.newlocal Components = Componentslocal TabModule ={Window = nil,Tabs ={},Containers ={},SelectedTab = 0,TabCount = 0,}function TabModule:Init(Window)TabModule.Window = Windowreturn TabModuleendfunction TabModule:GetCurrentTabPos()local TabHolderPos = TabModule.Window.TabHolder.AbsolutePosition.Ylocal TabPos = TabModule.Tabs[TabModule.SelectedTab].Frame.AbsolutePosition.Yreturn TabPos - TabHolderPosendfunction TabModule:New(Title, Icon, Parent)local Window = TabModule.Windowlocal Elements = Library.ElementsTabModule.TabCount = TabModule.TabCount + 1local TabIndex = TabModule.TabCountlocal Tab ={Selected = false,Name = Title,Type = "Tab",}if Library:GetIcon(Icon) thenIcon = Library:GetIcon(Icon)endif Icon == "" or nil thenIcon = nilendTab.Frame = New("TextButton",{Size = UDim2.new(1, 0, 0, 34),BackgroundTransparency = 1,Parent = Parent,ThemeTag ={BackgroundColor3 = "Tab",},},{New("UICorner",{CornerRadius = UDim.new(0, 6),}),New("TextLabel",{AnchorPoint = Vector2.new(0, 0.5),Position = Icon and UDim2.new(0, 30, 0.5, 0) or UDim2.new(0, 12, 0.5, 0),Text = Title,RichText = true,TextColor3 = Color3.fromRGB(255, 255, 255),TextTransparency = 0,FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json",Enum.FontWeight.Regular,Enum.FontStyle.Normal),TextSize = 12,TextXAlignment = "Left",TextYAlignment = "Center",Size = UDim2.new(1, -12, 1, 0),BackgroundTransparency = 1,ThemeTag ={TextColor3 = "Text",},}),New("ImageLabel",{AnchorPoint = Vector2.new(0, 0.5),Size = UDim2.fromOffset(16, 16),Position = UDim2.new(0, 8, 0.5, 0),BackgroundTransparency = 1,Image = Icon and Icon or nil,ThemeTag ={ImageColor3 = "Text",},}),})local ContainerLayout = New("UIListLayout",{Padding = UDim.new(0, 5),SortOrder = Enum.SortOrder.LayoutOrder,})Tab.ContainerFrame = New("ScrollingFrame",{Size = UDim2.fromScale(1, 1),BackgroundTransparency = 1,Parent = Window.ContainerHolder,Visible = false,BottomImage = "rbxassetid://6889812791",MidImage = "rbxassetid://6889812721",TopImage = "rbxassetid://6276641225",ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255),ScrollBarImageTransparency = 0.95,ScrollBarThickness = 3,BorderSizePixel = 0,CanvasSize = UDim2.fromScale(0, 0),ScrollingDirection = Enum.ScrollingDirection.Y,},{ContainerLayout,New("UIPadding",{PaddingRight = UDim.new(0, 10),PaddingLeft = UDim.new(0, 1),PaddingTop = UDim.new(0, 1),PaddingBottom = UDim.new(0, 1),}),})Creator.AddSignal(ContainerLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()Tab.ContainerFrame.CanvasSize = UDim2.new(0, 0, 0, ContainerLayout.AbsoluteContentSize.Y + 2)end)Tab.Motor, Tab.SetTransparency = Creator.SpringMotor(1, Tab.Frame, "BackgroundTransparency")Creator.AddSignal(Tab.Frame.MouseEnter, function()Tab.SetTransparency(Tab.Selected and 0.85 or 0.89)end)Creator.AddSignal(Tab.Frame.MouseLeave, function()Tab.SetTransparency(Tab.Selected and 0.89 or 1)end)Creator.AddSignal(Tab.Frame.MouseButton1Down, function()Tab.SetTransparency(0.92)end)Creator.AddSignal(Tab.Frame.MouseButton1Up, function()Tab.SetTransparency(Tab.Selected and 0.85 or 0.89)end)Creator.AddSignal(Tab.Frame.MouseButton1Click, function()TabModule:SelectTab(TabIndex)end)TabModule.Containers[TabIndex] = Tab.ContainerFrameTabModule.Tabs[TabIndex] = TabTab.Container = Tab.ContainerFrameTab.ScrollFrame = Tab.Containerfunction Tab:AddSection(SectionTitle)local Section ={Type = "Section"}local SectionFrame = Components.Section(SectionTitle, Tab.Container)Section.Container = SectionFrame.ContainerSection.ScrollFrame = Tab.Containersetmetatable(Section, Elements)return Sectionendsetmetatable(Tab, Elements)return Tabendfunction TabModule:SelectTab(Tab)local Window = TabModule.WindowTabModule.SelectedTab = Tabfor _, TabObject in next, TabModule.Tabs doTabObject.SetTransparency(1)TabObject.Selected = falseendTabModule.Tabs[Tab].SetTransparency(0.89)TabModule.Tabs[Tab].Selected = trueWindow.TabDisplay.Text = TabModule.Tabs[Tab].NameWindow.SelectorPosMotor:setGoal(Spring(TabModule:GetCurrentTabPos(),{frequency = 6}))task.spawn(function()Window.ContainerHolder.Parent = Window.ContainerAnimWindow.ContainerPosMotor:setGoal(Spring(15,{frequency = 10}))Window.ContainerBackMotor:setGoal(Spring(1,{frequency = 10}))task.wait(0.12)for _, Container in next, TabModule.Containers doContainer.Visible = falseendTabModule.Containers[Tab].Visible = trueWindow.ContainerPosMotor:setGoal(Spring(0,{frequency = 5}))Window.ContainerBackMotor:setGoal(Spring(0,{frequency = 8}))task.wait(0.12)Window.ContainerHolder.Parent = Window.ContainerCanvasend)endreturn TabModuleend)()Components.Button = (function()local New = Creator.Newlocal Spring = Flipper.Spring.newreturn function(Theme, Parent, DialogCheck)DialogCheck = DialogCheck or falselocal Button ={}Button.Title = New("TextLabel",{FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json"),TextColor3 = Color3.fromRGB(200, 200, 200),TextSize = 14,TextWrapped = true,TextXAlignment = Enum.TextXAlignment.Center,TextYAlignment = Enum.TextYAlignment.Center,BackgroundColor3 = Color3.fromRGB(255, 255, 255),AutomaticSize = Enum.AutomaticSize.Y,BackgroundTransparency = 1,Size = UDim2.fromScale(1, 1),ThemeTag ={TextColor3 = "Text",},})Button.HoverFrame = New("Frame",{Size = UDim2.fromScale(1, 1),BackgroundTransparency = 1,ThemeTag ={BackgroundColor3 = "Hover",},},{New("UICorner",{CornerRadius = UDim.new(0, 4),}),})Button.Frame = New("TextButton",{Size = UDim2.new(0, 0, 0, 32),Parent = Parent,ThemeTag ={BackgroundColor3 = "DialogButton",},},{New("UICorner",{CornerRadius = UDim.new(0, 4),}),New("UIStroke",{ApplyStrokeMode = Enum.ApplyStrokeMode.Border,Transparency = 0.65,ThemeTag ={Color = "DialogButtonBorder",},}),Button.HoverFrame,Button.Title,})local Motor, SetTransparency = Creator.SpringMotor(1, Button.HoverFrame, "BackgroundTransparency", DialogCheck)Creator.AddSignal(Button.Frame.MouseEnter, function()SetTransparency(0.97)end)Creator.AddSignal(Button.Frame.MouseLeave, function()SetTransparency(1)end)Creator.AddSignal(Button.Frame.MouseButton1Down, function()SetTransparency(1)end)Creator.AddSignal(Button.Frame.MouseButton1Up, function()SetTransparency(0.97)end)return Buttonendend)()Components.Dialog = (function()local Spring = Flipper.Spring.newlocal Instant = Flipper.Instant.newlocal New = Creator.Newlocal Dialog ={Window = nil,}function Dialog:Init(Window)Dialog.Window = Windowreturn Dialogendfunction Dialog:Create()local NewDialog ={Buttons = 0,}NewDialog.TintFrame = New("TextButton",{Text = "",Size = UDim2.fromScale(1, 1),BackgroundColor3 = Color3.fromRGB(0, 0, 0),BackgroundTransparency = 1,Parent = Dialog.Window.Root,},{New("UICorner",{CornerRadius = UDim.new(0, 8),}),})local TintMotor, TintTransparency = Creator.SpringMotor(1, NewDialog.TintFrame, "BackgroundTransparency", true)NewDialog.ButtonHolder = New("Frame",{Size = UDim2.new(1, -40, 1, -40),AnchorPoint = Vector2.new(0.5, 0.5),Position = UDim2.fromScale(0.5, 0.5),BackgroundTransparency = 1,},{New("UIListLayout",{Padding = UDim.new(0, 10),FillDirection = Enum.FillDirection.Horizontal,HorizontalAlignment = Enum.HorizontalAlignment.Center,SortOrder = Enum.SortOrder.LayoutOrder,}),})NewDialog.ButtonHolderFrame = New("Frame",{Size = UDim2.new(1, 0, 0, 70),Position = UDim2.new(0, 0, 1, -70),ThemeTag ={BackgroundColor3 = "DialogHolder",},},{New("Frame",{Size = UDim2.new(1, 0, 0, 1),ThemeTag ={BackgroundColor3 = "DialogHolderLine",},}),NewDialog.ButtonHolder,})NewDialog.Title = New("TextLabel",{FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json",Enum.FontWeight.SemiBold,Enum.FontStyle.Normal),Text = "Dialog",TextColor3 = Color3.fromRGB(240, 240, 240),TextSize = 22,TextXAlignment = Enum.TextXAlignment.Left,Size = UDim2.new(1, 0, 0, 22),Position = UDim2.fromOffset(20, 25),BackgroundColor3 = Color3.fromRGB(255, 255, 255),BackgroundTransparency = 1,ThemeTag ={TextColor3 = "Text",},})NewDialog.Scale = New("UIScale",{Scale = 1,})local ScaleMotor, Scale = Creator.SpringMotor(1.1, NewDialog.Scale, "Scale")NewDialog.Root = New("CanvasGroup",{Size = UDim2.fromOffset(300, 165),AnchorPoint = Vector2.new(0.5, 0.5),Position = UDim2.fromScale(0.5, 0.5),GroupTransparency = 1,Parent = NewDialog.TintFrame,ThemeTag ={BackgroundColor3 = "Dialog",},},{New("UICorner",{CornerRadius = UDim.new(0, 8),}),New("UIStroke",{Transparency = 0.5,ThemeTag ={Color = "DialogBorder",},}),NewDialog.Scale,NewDialog.Title,NewDialog.ButtonHolderFrame,})local RootMotor, RootTransparency = Creator.SpringMotor(1, NewDialog.Root, "GroupTransparency")function NewDialog:Open()Library.DialogOpen = trueNewDialog.Scale.Scale = 1.1TintTransparency(0.75)RootTransparency(0)Scale(1)endfunction NewDialog:Close()Library.DialogOpen = falseTintTransparency(1)RootTransparency(1)Scale(1.1)NewDialog.Root.UIStroke:Destroy()task.wait(0.15)NewDialog.TintFrame:Destroy()endfunction NewDialog:Button(Title, Callback)NewDialog.Buttons = NewDialog.Buttons + 1Title = Title or "Button"Callback = Callback or function() endlocal Button = Components.Button("", NewDialog.ButtonHolder, true)Button.Title.Text = Titlefor _, Btn in next, NewDialog.ButtonHolder:GetChildren() doif Btn:IsA("TextButton") thenBtn.Size =UDim2.new(1 / NewDialog.Buttons, -(((NewDialog.Buttons - 1) * 10) / NewDialog.Buttons), 0, 32)endendCreator.AddSignal(Button.Frame.MouseButton1Click, function()Library:SafeCallback(Callback)pcall(function()NewDialog:Close()end)end)return Buttonendreturn NewDialogendreturn Dialogend)()Components.Notification = (function()local Spring = Flipper.Spring.newlocal Instant = Flipper.Instant.newlocal New = Creator.Newlocal Notification ={}function Notification:Init(GUI)Notification.Holder = New("Frame",{Position = UDim2.new(1, -30, 1, -30),Size = UDim2.new(0, 240, 1, -30),AnchorPoint = Vector2.new(1, 1),BackgroundTransparency = 1,Parent = GUI,},{New("UIListLayout",{HorizontalAlignment = Enum.HorizontalAlignment.Center,SortOrder = Enum.SortOrder.LayoutOrder,VerticalAlignment = Enum.VerticalAlignment.Bottom,Padding = UDim.new(0, 20),}),})endfunction Notification:New(Config)Config.Title = Config.Title or ""Config.Content = Config.Content or ""Config.SubContent = Config.SubContent or ""Config.Duration = Config.Duration or nilConfig.Buttons = Config.Buttons or{}local NewNotification ={Closed = false,}NewNotification.AcrylicPaint = Acrylic.AcrylicPaint()NewNotification.Title = New("TextLabel",{Position = UDim2.new(0, 14, 0, 17),Text = Config.Title,RichText = true,TextColor3 = Color3.fromRGB(255, 255, 255),TextTransparency = 0,FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json"),TextSize = 13,TextXAlignment = "Left",TextYAlignment = "Center",Size = UDim2.new(1, -12, 0, 12),TextWrapped = true,BackgroundTransparency = 1,ThemeTag ={TextColor3 = "Text",},})NewNotification.ContentLabel = New("TextLabel",{FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json"),Text = Config.Content,TextColor3 = Color3.fromRGB(240, 240, 240),TextSize = 14,TextXAlignment = Enum.TextXAlignment.Left,AutomaticSize = Enum.AutomaticSize.Y,Size = UDim2.new(1, 0, 0, 14),BackgroundColor3 = Color3.fromRGB(255, 255, 255),BackgroundTransparency = 1,TextWrapped = true,ThemeTag ={TextColor3 = "Text",},})NewNotification.SubContentLabel = New("TextLabel",{FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json"),Text = Config.SubContent,TextColor3 = Color3.fromRGB(240, 240, 240),TextSize = 14,TextXAlignment = Enum.TextXAlignment.Left,AutomaticSize = Enum.AutomaticSize.Y,Size = UDim2.new(1, 0, 0, 14),BackgroundColor3 = Color3.fromRGB(255, 255, 255),BackgroundTransparency = 1,TextWrapped = true,ThemeTag ={TextColor3 = "SubText",},})NewNotification.LabelHolder = New("Frame",{AutomaticSize = Enum.AutomaticSize.Y,BackgroundColor3 = Color3.fromRGB(255, 255, 255),BackgroundTransparency = 1,Position = UDim2.fromOffset(14, 40),Size = UDim2.new(1, -28, 0, 0),},{New("UIListLayout",{SortOrder = Enum.SortOrder.LayoutOrder,VerticalAlignment = Enum.VerticalAlignment.Center,Padding = UDim.new(0, 3),}),NewNotification.ContentLabel,NewNotification.SubContentLabel,})NewNotification.CloseButton = New("TextButton",{Text = "",Position = UDim2.new(1, -14, 0, 13),Size = UDim2.fromOffset(20, 20),AnchorPoint = Vector2.new(1, 0),BackgroundTransparency = 1,},{New("ImageLabel",{Image = Components.Close,Size = UDim2.fromOffset(16, 16),Position = UDim2.fromScale(0.5, 0.5),AnchorPoint = Vector2.new(0.5, 0.5),BackgroundTransparency = 1,ThemeTag ={ImageColor3 = "Text",},}),})NewNotification.Root = New("Frame",{BackgroundTransparency = 1,Size = UDim2.new(1, 0, 1, 0),Position = UDim2.fromScale(1, 0),},{NewNotification.AcrylicPaint.Frame,NewNotification.Title,NewNotification.CloseButton,NewNotification.LabelHolder,})if Config.Content == "" thenNewNotification.ContentLabel.Visible = falseendif Config.SubContent == "" thenNewNotification.SubContentLabel.Visible = falseendNewNotification.Holder = New("Frame",{BackgroundTransparency = 1,Size = UDim2.new(1, 0, 0, 200),Parent = Notification.Holder,},{NewNotification.Root,})local RootMotor = Flipper.GroupMotor.new({Scale = 1,Offset = 60,})RootMotor:onStep(function(Values)NewNotification.Root.Position = UDim2.new(Values.Scale, Values.Offset, 0, 0)end)Creator.AddSignal(NewNotification.CloseButton.MouseButton1Click, function()NewNotification:Close()end)function NewNotification:Open()local ContentSize = NewNotification.LabelHolder.AbsoluteSize.YNewNotification.Holder.Size = UDim2.new(1, 0, 0, 58 + ContentSize)RootMotor:setGoal({Scale = Spring(0,{frequency = 5}),Offset = Spring(0,{frequency = 5}),})endfunction NewNotification:Close()if not NewNotification.Closed thenNewNotification.Closed = truetask.spawn(function()RootMotor:setGoal({Scale = Spring(1,{frequency = 5}),Offset = Spring(60,{frequency = 5}),})task.wait(0.4)if Library.UseAcrylic thenNewNotification.AcrylicPaint.Model:Destroy()endNewNotification.Holder:Destroy()end)endendNewNotification:Open()if Config.Duration thentask.delay(Config.Duration, function()NewNotification:Close()end)endreturn NewNotificationendreturn Notificationend)()Components.Textbox = (function()local New = Creator.Newreturn function(Parent, Acrylic)Acrylic = Acrylic or falselocal Textbox ={}Textbox.Input = New("TextBox",{FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json"),TextColor3 = Color3.fromRGB(200, 200, 200),TextSize = 14,TextXAlignment = Enum.TextXAlignment.Left,TextYAlignment = Enum.TextYAlignment.Center,BackgroundColor3 = Color3.fromRGB(255, 255, 255),AutomaticSize = Enum.AutomaticSize.Y,BackgroundTransparency = 1,Size = UDim2.fromScale(1, 1),Position = UDim2.fromOffset(10, 0),ThemeTag ={TextColor3 = "Text",PlaceholderColor3 = "SubText",},})Textbox.Container = New("Frame",{BackgroundTransparency = 1,ClipsDescendants = true,Position = UDim2.new(0, 6, 0, 0),Size = UDim2.new(1, -12, 1, 0),},{Textbox.Input,})Textbox.Indicator = New("Frame",{Size = UDim2.new(1, -4, 0, 1),Position = UDim2.new(0, 2, 1, 0),AnchorPoint = Vector2.new(0, 1),BackgroundTransparency = Acrylic and 0.5 or 0,ThemeTag ={BackgroundColor3 = Acrylic and "InputIndicator" or "DialogInputLine",},})Textbox.Frame = New("Frame",{Size = UDim2.new(0, 0, 0, 30),BackgroundTransparency = Acrylic and 0.9 or 0,Parent = Parent,ThemeTag ={BackgroundColor3 = Acrylic and "Input" or "DialogInput",},},{New("UICorner",{CornerRadius = UDim.new(0, 4),}),New("UIStroke",{ApplyStrokeMode = Enum.ApplyStrokeMode.Border,Transparency = Acrylic and 0.5 or 0.65,ThemeTag ={Color = Acrylic and "InElementBorder" or "DialogButtonBorder",},}),Textbox.Indicator,Textbox.Container,})local function Update()local PADDING = 2local Reveal = Textbox.Container.AbsoluteSize.Xif not Textbox.Input:IsFocused() or Textbox.Input.TextBounds.X <= Reveal - 2 * PADDING thenTextbox.Input.Position = UDim2.new(0, PADDING, 0, 0)elselocal Cursor = Textbox.Input.CursorPositionif Cursor ~= -1 thenlocal subtext = string.sub(Textbox.Input.Text, 1, Cursor - 1)local width = TextService:GetTextSize(subtext,Textbox.Input.TextSize,Textbox.Input.Font,Vector2.new(math.huge, math.huge)).Xlocal CurrentCursorPos = Textbox.Input.Position.X.Offset + widthif CurrentCursorPos < PADDING thenTextbox.Input.Position = UDim2.fromOffset(PADDING - width, 0)elseif CurrentCursorPos > Reveal - PADDING - 1 thenTextbox.Input.Position = UDim2.fromOffset(Reveal - width - PADDING - 1, 0)endendendendtask.spawn(Update)Creator.AddSignal(Textbox.Input:GetPropertyChangedSignal("Text"), Update)Creator.AddSignal(Textbox.Input:GetPropertyChangedSignal("CursorPosition"), Update)Creator.AddSignal(Textbox.Input.Focused, function()Update()Textbox.Indicator.Size = UDim2.new(1, -2, 0, 2)Textbox.Indicator.Position = UDim2.new(0, 1, 1, 0)Textbox.Indicator.BackgroundTransparency = 0Creator.OverrideTag(Textbox.Frame,{BackgroundColor3 = Acrylic and "InputFocused" or "DialogHolder"})Creator.OverrideTag(Textbox.Indicator,{BackgroundColor3 = "InputIndicatorFocus"})end)Creator.AddSignal(Textbox.Input.FocusLost, function()Update()Textbox.Indicator.Size = UDim2.new(1, -4, 0, 1)Textbox.Indicator.Position = UDim2.new(0, 2, 1, 0)Textbox.Indicator.BackgroundTransparency = 0.5Creator.OverrideTag(Textbox.Frame,{BackgroundColor3 = Acrylic and "Input" or "DialogInput"})Creator.OverrideTag(Textbox.Indicator,{BackgroundColor3 = Acrylic and "InputIndicator" or "DialogInputLine"})end)return Textboxendend)()Components.TitleBar = (function()local New = Creator.Newlocal AddSignal = Creator.AddSignalreturn function(Config)local TitleBar ={}local function BarButton(Icon, Pos, Parent, Callback)local Button ={Callback = Callback or function() end,}Button.Frame = New("TextButton",{Size = UDim2.new(0, 34, 1, -8),AnchorPoint = Vector2.new(1, 0),BackgroundTransparency = 1,Parent = Parent,Position = Pos,Text = "",ThemeTag ={BackgroundColor3 = "Text",},},{New("UICorner",{CornerRadius = UDim.new(0, 7),}),New("ImageLabel",{Image = Icon,Size = UDim2.fromOffset(16, 16),Position = UDim2.fromScale(0.5, 0.5),AnchorPoint = Vector2.new(0.5, 0.5),BackgroundTransparency = 1,Name = "Icon",ThemeTag ={ImageColor3 = "Text",},}),})local Motor, SetTransparency = Creator.SpringMotor(1, Button.Frame, "BackgroundTransparency")AddSignal(Button.Frame.MouseEnter, function()SetTransparency(0.94)end)AddSignal(Button.Frame.MouseLeave, function()SetTransparency(1, true)end)AddSignal(Button.Frame.MouseButton1Down, function()SetTransparency(0.96)end)AddSignal(Button.Frame.MouseButton1Up, function()SetTransparency(0.94)end)AddSignal(Button.Frame.MouseButton1Click, Button.Callback)Button.SetCallback = function(Func)Button.Callback = Funcendreturn ButtonendTitleBar.Frame = New("Frame",{Size = UDim2.new(1, 0, 0, 42),BackgroundTransparency = 1,Parent = Config.Parent,},{New("Frame",{Size = UDim2.new(1, -16, 1, 0),Position = UDim2.new(0, 16, 0, 0),BackgroundTransparency = 1,},{New("UIListLayout",{Padding = UDim.new(0, 5),FillDirection = Enum.FillDirection.Horizontal,SortOrder = Enum.SortOrder.LayoutOrder,}),New("TextLabel",{RichText = true,Text = Config.Title,FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json",Enum.FontWeight.Regular,Enum.FontStyle.Normal),TextSize = 12,TextXAlignment = "Left",TextYAlignment = "Center",Size = UDim2.fromScale(0, 1),AutomaticSize = Enum.AutomaticSize.X,BackgroundTransparency = 1,ThemeTag ={TextColor3 = "Text",},}),New("TextLabel",{RichText = true,Text = Config.SubTitle,TextTransparency = 0.4,FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json",Enum.FontWeight.Regular,Enum.FontStyle.Normal),TextSize = 12,TextXAlignment = "Left",TextYAlignment = "Center",Size = UDim2.fromScale(0, 1),AutomaticSize = Enum.AutomaticSize.X,BackgroundTransparency = 1,ThemeTag ={TextColor3 = "Text",},}),}),New("Frame",{BackgroundTransparency = 0.5,Size = UDim2.new(1, 0, 0, 1),Position = UDim2.new(0, 0, 1, 0),ThemeTag ={BackgroundColor3 = "TitleBarLine",},}),})TitleBar.CloseButton = BarButton(Components.Assets.Close, UDim2.new(1, -4, 0, 4), TitleBar.Frame, function()Library.Window:Dialog({Title = "Close",Content = "Are you sure you want to unload the interface?",Buttons ={{Title = "Yes",Callback = function()Library:Destroy()end,},{Title = "No",},},})end)TitleBar.MaxButton = BarButton(Components.Assets.Max, UDim2.new(1, -40, 0, 4), TitleBar.Frame, function()Config.Window.Maximize(not Config.Window.Maximized)end)TitleBar.MinButton = BarButton(Components.Assets.Min, UDim2.new(1, -80, 0, 4), TitleBar.Frame, function()Library.Window:Minimize()if not Close_ImageButton.Visible then Close_ImageButton.Visible = true endend)Close_ImageButton.Activated:Connect(function()Library.Window:Minimize()if Close_ImageButton.Visible then Close_ImageButton.Visible = false endend)return TitleBarendend)()Components.Window = (function()local Spring = Flipper.Spring.newlocal Instant = Flipper.Instant.newlocal New = Creator.Newreturn function(Config)local Window ={Minimized = false,Maximized = false,Size = Config.Size,CurrentPos = 0,TabWidth = 0,Position = UDim2.fromOffset(Camera.ViewportSize.X / 2 - Config.Size.X.Offset / 2,Camera.ViewportSize.Y / 2 - Config.Size.Y.Offset / 2),}local Dragging, DragInput, MousePos, StartPos = falselocal Resizing, ResizePos = falselocal MinimizeNotif = falseWindow.AcrylicPaint = Acrylic.AcrylicPaint()Window.TabWidth = Config.TabWidthlocal Selector = New("Frame",{Size = UDim2.fromOffset(4, 0),BackgroundColor3 = Color3.fromRGB(76, 194, 255),Position = UDim2.fromOffset(0, 17),AnchorPoint = Vector2.new(0, 0.5),ThemeTag ={BackgroundColor3 = "Accent",},},{New("UICorner",{CornerRadius = UDim.new(0, 2),}),})local ResizeStartFrame = New("Frame",{Size = UDim2.fromOffset(20, 20),BackgroundTransparency = 1,Position = UDim2.new(1, -20, 1, -20),})Window.TabHolder = New("ScrollingFrame",{Size = UDim2.fromScale(1, 1),BackgroundTransparency = 1,ScrollBarImageTransparency = 1,ScrollBarThickness = 0,BorderSizePixel = 0,CanvasSize = UDim2.fromScale(0, 0),ScrollingDirection = Enum.ScrollingDirection.Y,},{New("UIListLayout",{Padding = UDim.new(0, 4),}),})local TabFrame = New("Frame",{Size = UDim2.new(0, Window.TabWidth, 1, -66),Position = UDim2.new(0, 12, 0, 54),BackgroundTransparency = 1,ClipsDescendants = true,},{Window.TabHolder,Selector,})Window.TabDisplay = New("TextLabel",{RichText = true,Text = "Tab",TextTransparency = 0,FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal),TextSize = 28,TextXAlignment = "Left",TextYAlignment = "Center",Size = UDim2.new(1, -16, 0, 28),Position = UDim2.fromOffset(Window.TabWidth + 26, 56),BackgroundTransparency = 1,ThemeTag ={TextColor3 = "Text",},})Window.ContainerHolder = New("Frame",{Size = UDim2.fromScale(1, 1),BackgroundTransparency = 1,})Window.ContainerAnim = New("CanvasGroup",{Size = UDim2.fromScale(1, 1),BackgroundTransparency = 1,})Window.ContainerCanvas = New("Frame",{Size = UDim2.new(1, -Window.TabWidth - 32, 1, -102),Position = UDim2.fromOffset(Window.TabWidth + 26, 90),BackgroundTransparency = 1,},{Window.ContainerAnim,Window.ContainerHolder})Window.Root = New("Frame",{BackgroundTransparency = 1,Size = Window.Size,Position = Window.Position,Parent = Config.Parent,},{Window.AcrylicPaint.Frame,Window.TabDisplay,Window.ContainerCanvas,TabFrame,ResizeStartFrame,})Window.TitleBar = Components.TitleBar({Title = Config.Title,SubTitle = Config.SubTitle,Parent = Window.Root,Window = Window,})if Library.UseAcrylic thenWindow.AcrylicPaint.AddParent(Window.Root)endlocal SizeMotor = Flipper.GroupMotor.new({X = Window.Size.X.Offset,Y = Window.Size.Y.Offset,})local PosMotor = Flipper.GroupMotor.new({X = Window.Position.X.Offset,Y = Window.Position.Y.Offset,})Window.SelectorPosMotor = Flipper.SingleMotor.new(17)Window.SelectorSizeMotor = Flipper.SingleMotor.new(0)Window.ContainerBackMotor = Flipper.SingleMotor.new(0)Window.ContainerPosMotor = Flipper.SingleMotor.new(94)SizeMotor:onStep(function(values)Window.Root.Size = UDim2.new(0, values.X, 0, values.Y)end)PosMotor:onStep(function(values)Window.Root.Position = UDim2.new(0, values.X, 0, values.Y)end)local LastValue = 0local LastTime = 0Window.SelectorPosMotor:onStep(function(Value)Selector.Position = UDim2.new(0, 0, 0, Value + 17)local Now = tick()local DeltaTime = Now - LastTimeif LastValue ~= nil thenWindow.SelectorSizeMotor:setGoal(Spring((math.abs(Value - LastValue) / (DeltaTime * 60)) + 16))LastValue = ValueendLastTime = Nowend)Window.SelectorSizeMotor:onStep(function(Value)Selector.Size = UDim2.new(0, 4, 0, Value)end)Window.ContainerBackMotor:onStep(function(Value)Window.ContainerAnim.GroupTransparency = Valueend)Window.ContainerPosMotor:onStep(function(Value)Window.ContainerAnim.Position = UDim2.fromOffset(0, Value)end)local OldSizeXlocal OldSizeYWindow.Maximize = function(Value, NoPos, Instant)Window.Maximized = ValueWindow.TitleBar.MaxButton.Frame.Icon.Image = Value and Components.Assets.Restore or Components.Assets.Maxif Value thenOldSizeX = Window.Size.X.OffsetOldSizeY = Window.Size.Y.Offsetendlocal SizeX = Value and Camera.ViewportSize.X or OldSizeXlocal SizeY = Value and Camera.ViewportSize.Y or OldSizeYSizeMotor:setGoal({X = Flipper[Instant and "Instant" or "Spring"].new(SizeX,{frequency = 6}),Y = Flipper[Instant and "Instant" or "Spring"].new(SizeY,{frequency = 6}),})Window.Size = UDim2.fromOffset(SizeX, SizeY)if not NoPos thenPosMotor:setGoal({X = Spring(Value and 0 or Window.Position.X.Offset,{frequency = 6}),Y = Spring(Value and 0 or Window.Position.Y.Offset,{frequency = 6}),})endendCreator.AddSignal(Window.TitleBar.Frame.InputBegan, function(Input)ifInput.UserInputType == Enum.UserInputType.MouseButton1or Input.UserInputType == Enum.UserInputType.TouchthenDragging = trueMousePos = Input.PositionStartPos = Window.Root.Positionif Window.Maximized thenStartPos = UDim2.fromOffset(Mouse.X - (Mouse.X * ((OldSizeX - 100) / Window.Root.AbsoluteSize.X)),Mouse.Y - (Mouse.Y * (OldSizeY / Window.Root.AbsoluteSize.Y)))endInput.Changed:Connect(function()if Input.UserInputState == Enum.UserInputState.End thenDragging = falseendend)endend)Creator.AddSignal(Window.TitleBar.Frame.InputChanged, function(Input)ifInput.UserInputType == Enum.UserInputType.MouseMovementor Input.UserInputType == Enum.UserInputType.TouchthenDragInput = Inputendend)Creator.AddSignal(ResizeStartFrame.InputBegan, function(Input)ifInput.UserInputType == Enum.UserInputType.MouseButton1or Input.UserInputType == Enum.UserInputType.TouchthenResizing = trueResizePos = Input.Positionendend)Creator.AddSignal(UserInputService.InputChanged, function(Input)if Input == DragInput and Dragging thenlocal Delta = Input.Position - MousePosWindow.Position = UDim2.fromOffset(StartPos.X.Offset + Delta.X, StartPos.Y.Offset + Delta.Y)PosMotor:setGoal({X = Instant(Window.Position.X.Offset),Y = Instant(Window.Position.Y.Offset),})if Window.Maximized thenWindow.Maximize(false, true, true)endendif(Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch)and Resizingthenlocal Delta = Input.Position - ResizePoslocal StartSize = Window.Sizelocal TargetSize = Vector3.new(StartSize.X.Offset, StartSize.Y.Offset, 0) + Vector3.new(1, 1, 0) * Deltalocal TargetSizeClamped =Vector2.new(math.clamp(TargetSize.X, 470, 2048), math.clamp(TargetSize.Y, 380, 2048))SizeMotor:setGoal({X = Flipper.Instant.new(TargetSizeClamped.X),Y = Flipper.Instant.new(TargetSizeClamped.Y),})endend) Creator.AddSignal(UserInputService.InputEnded, function(Input)if Resizing == true or Input.UserInputType == Enum.UserInputType.Touch thenResizing = falseWindow.Size = UDim2.fromOffset(SizeMotor:getValue().X, SizeMotor:getValue().Y)endend)Creator.AddSignal(Window.TabHolder.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()Window.TabHolder.CanvasSize = UDim2.new(0, 0, 0, Window.TabHolder.UIListLayout.AbsoluteContentSize.Y)end)function Window:Minimize()Window.Minimized = not Window.MinimizedWindow.Root.Visible = not Window.Minimizedpcall(SwapIco)endfunction Window:Destroy()if Library.UseAcrylic thenWindow.AcrylicPaint.Model:Destroy()endWindow.Root:Destroy()endlocal DialogModule = Components.Dialog:Init(Window)function Window:Dialog(Config)local Dialog = DialogModule:Create()Dialog.Title.Text = Config.Titlelocal Content = New("TextLabel",{FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json"),Text = Config.Content,TextColor3 = Color3.fromRGB(240, 240, 240),TextSize = 14,TextXAlignment = Enum.TextXAlignment.Left,TextYAlignment = Enum.TextYAlignment.Top,Size = UDim2.new(1, -40, 1, 0),Position = UDim2.fromOffset(20, 60),BackgroundTransparency = 1,Parent = Dialog.Root,ClipsDescendants = false,ThemeTag ={TextColor3 = "Text",},})New("UISizeConstraint",{MinSize = Vector2.new(300, 165),MaxSize = Vector2.new(620, math.huge),Parent = Dialog.Root,})Dialog.Root.Size = UDim2.fromOffset(Content.TextBounds.X + 40, 165)if Content.TextBounds.X + 40 > Window.Size.X.Offset - 120 thenDialog.Root.Size = UDim2.fromOffset(Window.Size.X.Offset - 120, 165)Content.TextWrapped = trueDialog.Root.Size = UDim2.fromOffset(Window.Size.X.Offset - 120, Content.TextBounds.Y + 150)endfor _, Button in next, Config.Buttons doDialog:Button(Button.Title, Button.Callback)endDialog:Open()endlocal TabModule = Components.Tab:Init(Window)function Window:AddTab(TabConfig)return TabModule:New(TabConfig.Title, TabConfig.Icon, Window.TabHolder)endfunction Window:SelectTab(Tab)TabModule:SelectTab(Tab)endCreator.AddSignal(Window.TabHolder:GetPropertyChangedSignal("CanvasPosition"), function()LastValue = TabModule:GetCurrentTabPos() + 16LastTime = 0Window.SelectorPosMotor:setGoal(Instant(TabModule:GetCurrentTabPos()))end)return Windowendend)()local ElementsTable ={}local AddSignal = Creator.AddSignalElementsTable.Button = (function()local Element ={}Element.__index = ElementElement.__type = "Button"function Element:New(Config)assert(Config.Title, "Button - Missing Title")Config.Callback = Config.Callback or function() endlocal ButtonFrame = Components.Element(Config.Title, Config.Description, self.Container, true, Config)local ButtonIco = New("ImageLabel",{Image = "rbxassetid://83063565598700",Size = UDim2.fromOffset(35, 35),AnchorPoint = Vector2.new(1, 0.5),Position = UDim2.new(1, -10, 0.5, 0),BackgroundTransparency = 1,Parent = ButtonFrame.Frame,ImageColor3 = Color3.fromRGB(140, 0, 230),})Creator.AddSignal(ButtonFrame.Frame.MouseButton1Click, function()Library:SafeCallback(Config.Callback)end)return ButtonFrameendreturn Elementend)()ElementsTable.Toggle = (function()local Element ={}Element.__index = ElementElement.__type = "Toggle"function Element:New(Idx, Config)assert(Config.Title, "Toggle - Missing Title")local Toggle ={Value = Config.Default or false,Callback = Config.Callback or function(Value) end,Type = "Toggle",}local ToggleFrame = Components.Element(Config.Title, Config.Description, self.Container, true, Config)ToggleFrame.DescLabel.Size = UDim2.new(1, -54, 0, 14)Toggle.SetTitle = ToggleFrame.SetTitleToggle.SetDesc = ToggleFrame.SetDescToggle.Visible = ToggleFrame.VisibleToggle.Elements = ToggleFramelocal ToggleCircle = New("ImageLabel",{AnchorPoint = Vector2.new(0, 0.5),Size = UDim2.fromOffset(14, 14),Position = UDim2.new(0, 2, 0.5, 0),Image = "http://www.roblox.com/asset/?id=12266946128",ImageTransparency = 0.5,ThemeTag ={ImageColor3 = "ToggleSlider",},})local ToggleBorder = New("UIStroke",{Transparency = 0.5,ThemeTag ={Color = "ToggleSlider",},})local ToggleSlider = New("Frame",{Size = UDim2.fromOffset(36, 18),AnchorPoint = Vector2.new(1, 0.5),Position = UDim2.new(1, -10, 0.5, 0),Parent = ToggleFrame.Frame,BackgroundTransparency = 1,ThemeTag ={BackgroundColor3 = "Accent",},},{New("UICorner",{CornerRadius = UDim.new(0, 9),}),ToggleBorder,ToggleCircle,})function Toggle:OnChanged(Func)Toggle.Changed = FuncFunc(Toggle.Value)endfunction Toggle:SetValue(Value)Value = not not ValueToggle.Value = ValueCreator.OverrideTag(ToggleBorder,{Color = Toggle.Value and "Accent" or "ToggleSlider"})Creator.OverrideTag(ToggleCircle,{ImageColor3 = Toggle.Value and "ToggleToggled" or "ToggleSlider"})TweenService:Create(ToggleCircle,TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),{Position = UDim2.new(0, Toggle.Value and 19 or 2, 0.5, 0)}):Play()TweenService:Create(ToggleSlider,TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),{BackgroundTransparency = Toggle.Value and 0.45 or 1}):Play()ToggleCircle.ImageTransparency = Toggle.Value and 0 or 0.5Library:SafeCallback(Toggle.Callback, Toggle.Value)Library:SafeCallback(Toggle.Changed, Toggle.Value)endfunction Toggle:Destroy()ToggleFrame:Destroy()Library.Options[Idx] = nilendCreator.AddSignal(ToggleFrame.Frame.MouseButton1Click, function()Toggle:SetValue(not Toggle.Value)end)Toggle:SetValue(Toggle.Value)Library.Options[Idx] = Togglereturn Toggleendreturn Elementend)()ElementsTable.Dropdown = (function()local Element ={}Element.__index = ElementElement.__type = "Dropdown"function Element:New(Idx, Config)local Dropdown ={Values = Config.Values,Value = Config.Default,Multi = Config.Multi,Buttons ={},Opened = false,Type = "Dropdown",Callback = Config.Callback or function() end,}if Dropdown.Multi and Config.AllowNull thenDropdown.Value ={}endlocal DropdownFrame = Components.Element(Config.Title, Config.Description, self.Container, false, Config)DropdownFrame.DescLabel.Size = UDim2.new(1, -170, 0, 14)Dropdown.SetTitle = DropdownFrame.SetTitleDropdown.SetDesc = DropdownFrame.SetDescDropdown.Visible = DropdownFrame.VisibleDropdown.Elements = DropdownFramelocal DropdownDisplay = New("TextLabel",{FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal),Text = "Value",TextColor3 = Color3.fromRGB(240, 240, 240),TextSize = 13,TextXAlignment = Enum.TextXAlignment.Left,Size = UDim2.new(1, -30, 0, 14),Position = UDim2.new(0, 8, 0.5, 0),AnchorPoint = Vector2.new(0, 0.5),BackgroundColor3 = Color3.fromRGB(255, 255, 255),BackgroundTransparency = 1,TextTruncate = Enum.TextTruncate.AtEnd,ThemeTag ={TextColor3 = "Text",},})local DropdownIco = New("ImageLabel",{Image = "rbxassetid://10709790948",Size = UDim2.fromOffset(16, 16),AnchorPoint = Vector2.new(1, 0.5),Position = UDim2.new(1, -8, 0.5, 0),BackgroundTransparency = 1,ThemeTag ={ImageColor3 = "SubText",},})local DropdownInner = New("TextButton",{Size = UDim2.fromOffset(160, 30),Position = UDim2.new(1, -10, 0.5, 0),AnchorPoint = Vector2.new(1, 0.5),BackgroundTransparency = 0.9,Parent = DropdownFrame.Frame,ThemeTag ={BackgroundColor3 = "DropdownFrame",},},{New("UICorner",{CornerRadius = UDim.new(0, 5),}),New("UIStroke",{Transparency = 0.5,ApplyStrokeMode = Enum.ApplyStrokeMode.Border,ThemeTag ={Color = "InElementBorder",},}),DropdownIco,DropdownDisplay,})local DropdownListLayout = New("UIListLayout",{Padding = UDim.new(0, 3),})local DropdownScrollFrame = New("ScrollingFrame",{Size = UDim2.new(1, -5, 1, -10),Position = UDim2.fromOffset(5, 0),BackgroundTransparency = 1,BottomImage = "rbxassetid://6889812791",MidImage = "rbxassetid://6889812721",TopImage = "rbxassetid://6276641225",ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255),ScrollBarImageTransparency = 0.75,ScrollBarThickness = 5,BorderSizePixel = 0,CanvasSize = UDim2.fromScale(0, 0),ScrollingDirection = Enum.ScrollingDirection.Y,},{DropdownListLayout,})            -- Create persistent search bar            Dropdown.SearchBar = Instance.new("TextBox")            Dropdown.SearchBar.Size = UDim2.new(1, -10, 0, 28)            Dropdown.SearchBar.Position = UDim2.new(0, 0, 0, 0)            Dropdown.SearchBar.PlaceholderText = "Search..."            Dropdown.SearchBar.Text = ""            Dropdown.SearchBar.BackgroundColor3 = Themes.LimitHub.DropdownHolder            Dropdown.SearchBar.TextColor3 = Color3.fromRGB(255, 255, 255)            Dropdown.SearchBar.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)            Dropdown.SearchBar.BorderSizePixel = 0            Dropdown.SearchBar.ClearTextOnFocus = false            Dropdown.SearchBar.MultiLine = false            Dropdown.SearchBar.Selectable = true            Dropdown.SearchBar.TextEditable = true            Dropdown.SearchBar.ZIndex = 10            Dropdown.SearchBar.Parent = DropdownScrollFrame            -- Padding so list starts below search bar            local padding = Instance.new("UIPadding")            padding.PaddingTop = UDim.new(0, 0)            padding.Parent = DropdownScrollFrame                        -- Filtering function            local function applyFilter()                if not Dropdown or not Dropdown.SearchBar or not DropdownScrollFrame then return end                local query = string.lower(Dropdown.SearchBar.Text or "")                for _, element in ipairs(DropdownScrollFrame:GetChildren()) do                    if element:IsA("TextButton") then                        -- Prefer reading from ButtonLabel child if available                        local label = element:FindFirstChild("ButtonLabel")                        local textValue = ""                        if label and label:IsA("TextLabel") then                            textValue = label.Text or ""                        else                            textValue = element.Text or ""                        end                        local textLower = string.lower(textValue)                        if query == "" or string.find(textLower, query, 1, true) then                            element.Visible = true                        else                            element.Visible = false                        end                    end                end                if typeof(RecalculateListSize) == "function" then                    RecalculateListSize()                end                DropdownScrollFrame.CanvasPosition = Vector2.new(0, 0)            end            -- Ensure filter updates when typing in SearchBar (attach after creation)            if Dropdown and Dropdown.SearchBar then                Dropdown.SearchBar:GetPropertyChangedSignal("Text"):Connect(applyFilter)            end            Dropdown.SearchBar:GetPropertyChangedSignal("Text"):Connect(applyFilter)    local DropdownHolderFrame = New("Frame",{Size = UDim2.fromScale(1, 0.6),ThemeTag ={BackgroundColor3 = "DropdownHolder",},},{DropdownScrollFrame,New("UICorner",{CornerRadius = UDim.new(0, 7),}),New("UIStroke",{ApplyStrokeMode = Enum.ApplyStrokeMode.Border,ThemeTag ={Color = "DropdownBorder",},}),New("ImageLabel",{BackgroundTransparency = 1,Image = "http://www.roblox.com/asset/?id=5554236805",ScaleType = Enum.ScaleType.Slice,SliceCenter = Rect.new(23, 23, 277, 277),Size = UDim2.fromScale(1, 1) + UDim2.fromOffset(30, 30),Position = UDim2.fromOffset(-15, -15),ImageColor3 = Color3.fromRGB(0, 0, 0),ImageTransparency = 0.1,}),})local DropdownHolderCanvas = New("Frame",{BackgroundTransparency = 1,Size = UDim2.fromOffset(170, 300),Parent = Library.GUI,Visible = false,},{DropdownHolderFrame,New("UISizeConstraint",{MinSize = Vector2.new(170, 0),}),})table.insert(Library.OpenFrames, DropdownHolderCanvas)local function RecalculateListPosition()local Add = 0if Camera.ViewportSize.Y - DropdownInner.AbsolutePosition.Y < DropdownHolderCanvas.AbsoluteSize.Y - 5 thenAdd = DropdownHolderCanvas.AbsoluteSize.Y- 5- (Camera.ViewportSize.Y - DropdownInner.AbsolutePosition.Y)+ 40endDropdownHolderCanvas.Position =UDim2.fromOffset(DropdownInner.AbsolutePosition.X - 1, DropdownInner.AbsolutePosition.Y - 5 - Add)endlocal ListSizeX = 0local function RecalculateListSize()if #Dropdown.Values > 10 thenDropdownHolderCanvas.Size = UDim2.fromOffset(ListSizeX, 392)elseDropdownHolderCanvas.Size = UDim2.fromOffset(ListSizeX, DropdownListLayout.AbsoluteContentSize.Y + 10)endendlocal function RecalculateCanvasSize()DropdownScrollFrame.CanvasSize = UDim2.fromOffset(0, DropdownListLayout.AbsoluteContentSize.Y)endRecalculateListPosition()RecalculateListSize()Creator.AddSignal(DropdownInner:GetPropertyChangedSignal("AbsolutePosition"), RecalculateListPosition)Creator.AddSignal(DropdownInner.MouseButton1Click, function()Dropdown:Open()end)Creator.AddSignal(UserInputService.InputBegan, function(Input)ifInput.UserInputType == Enum.UserInputType.MouseButton1or Input.UserInputType == Enum.UserInputType.Touchthenlocal AbsPos, AbsSize = DropdownHolderFrame.AbsolutePosition, DropdownHolderFrame.AbsoluteSizeifMouse.X < AbsPos.Xor Mouse.X > AbsPos.X + AbsSize.Xor Mouse.Y < (AbsPos.Y - 20 - 1)or Mouse.Y > AbsPos.Y + AbsSize.YthenDropdown:Close()endendend)local ScrollFrame = self.ScrollFramefunction Dropdown:Open()Dropdown.Opened = trueScrollFrame.ScrollingEnabled = falseDropdownHolderCanvas.Visible = trueTweenService:Create(DropdownHolderFrame,TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),{Size = UDim2.fromScale(1, 1)}):Play()endfunction Dropdown:Close()Dropdown.Opened = falseScrollFrame.ScrollingEnabled = trueDropdownHolderFrame.Size = UDim2.fromScale(1, 0.6)DropdownHolderCanvas.Visible = falseendfunction Dropdown:Display()local Values = Dropdown.Valueslocal Str = ""if Config.Multi thenfor Idx, Value in next, Values doif Dropdown.Value[Value] thenStr = Str .. Value .. ", "endendStr = Str:sub(1, #Str - 2)elseStr = Dropdown.Value or ""endDropdownDisplay.Text = (Str == "" and "--" or Str)endfunction Dropdown:GetActiveValues()if Config.Multi thenlocal T ={}for Value, Bool in next, Dropdown.Value dotable.insert(T, Value)endreturn Telsereturn Dropdown.Value and 1 or 0endendfunction Dropdown:BuildDropdownList()local Values = Dropdown.Valueslocal Buttons ={}for _, Element in next, DropdownScrollFrame:GetChildren() do                if not Element:IsA("UIListLayout")                    and Element ~= Dropdown.SearchBar                    and not Element:IsA("UIPadding") then                    Element:Destroy()                end            endlocal Count = 0for Idx, Value in next, Values dolocal Table ={}Count = Count + 1local ButtonSelector = New("Frame",{Size = UDim2.fromOffset(4, 14),BackgroundColor3 = Color3.fromRGB(76, 194, 255),Position = UDim2.fromOffset(-1, 16),AnchorPoint = Vector2.new(0, 0.5),ThemeTag ={BackgroundColor3 = "Accent",},},{New("UICorner",{CornerRadius = UDim.new(0, 2),}),})local ButtonLabel = New("TextLabel",{FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json"),Text = Value,TextColor3 = Color3.fromRGB(200, 200, 200),TextSize = 13,TextXAlignment = Enum.TextXAlignment.Left,BackgroundColor3 = Color3.fromRGB(255, 255, 255),AutomaticSize = Enum.AutomaticSize.Y,BackgroundTransparency = 1,Size = UDim2.fromScale(1, 1),Position = UDim2.fromOffset(10, 0),Name = "ButtonLabel",ThemeTag ={TextColor3 = "Text",},})local Button = New("TextButton",{Size = UDim2.new(1, -5, 0, 32),BackgroundTransparency = 1,ZIndex = 23,Text = "",Parent = DropdownScrollFrame,ThemeTag ={BackgroundColor3 = "DropdownOption",},},{ButtonSelector,ButtonLabel,New("UICorner",{CornerRadius = UDim.new(0, 6),}),})local Selectedif Config.Multi thenSelected = Dropdown.Value[Value]elseSelected = Dropdown.Value == Valueendlocal BackMotor, SetBackTransparency = Creator.SpringMotor(1, Button, "BackgroundTransparency")local SelMotor, SetSelTransparency = Creator.SpringMotor(1, ButtonSelector, "BackgroundTransparency")local SelectorSizeMotor = Flipper.SingleMotor.new(6)SelectorSizeMotor:onStep(function(value)ButtonSelector.Size = UDim2.new(0, 4, 0, value)end)Creator.AddSignal(Button.MouseEnter, function()SetBackTransparency(Selected and 0.85 or 0.89)end)Creator.AddSignal(Button.MouseLeave, function()SetBackTransparency(Selected and 0.89 or 1)end)Creator.AddSignal(Button.MouseButton1Down, function()SetBackTransparency(0.92)end)Creator.AddSignal(Button.MouseButton1Up, function()SetBackTransparency(Selected and 0.85 or 0.89)end)function Table:UpdateButton()if Config.Multi thenSelected = Dropdown.Value[Value]if Selected thenSetBackTransparency(0.89)endelseSelected = Dropdown.Value == ValueSetBackTransparency(Selected and 0.89 or 1)endSelectorSizeMotor:setGoal(Flipper.Spring.new(Selected and 14 or 6,{frequency = 6}))SetSelTransparency(Selected and 0 or 1)endButtonLabel.InputBegan:Connect(function(Input)ifInput.UserInputType == Enum.UserInputType.MouseButton1or Input.UserInputType == Enum.UserInputType.Touchthenlocal Try = not Selectedif Dropdown:GetActiveValues() == 1 and not Try and not Config.AllowNull thenelseif Config.Multi thenSelected = TryDropdown.Value[Value] = Selected and true or nilelseSelected = TryDropdown.Value = Selected and Value or nilfor _, OtherButton in next, Buttons doOtherButton:UpdateButton()endendTable:UpdateButton()Dropdown:Display()Library:SafeCallback(Dropdown.Callback, Dropdown.Value)Library:SafeCallback(Dropdown.Changed, Dropdown.Value)endendend)Table:UpdateButton()Dropdown:Display()Buttons[Button] = TableendListSizeX = 0for Button, Table in next, Buttons doif Button.ButtonLabel thenif Button.ButtonLabel.TextBounds.X > ListSizeX thenListSizeX = Button.ButtonLabel.TextBounds.XendendendListSizeX = ListSizeX + 30RecalculateCanvasSize()RecalculateListSize()endfunction Dropdown:SetValues(NewValues)if NewValues thenDropdown.Values = NewValuesendDropdown:BuildDropdownList()endfunction Dropdown:OnChanged(Func)Dropdown.Changed = FuncFunc(Dropdown.Value)endfunction Dropdown:SetValue(Val)if Dropdown.Multi thenlocal nTable ={}for Value, Bool in next, Val doif table.find(Dropdown.Values, Value) thennTable[Value] = trueendendDropdown.Value = nTableelseif not Val thenDropdown.Value = nilelseif table.find(Dropdown.Values, Val) thenDropdown.Value = ValendendDropdown:BuildDropdownList()Library:SafeCallback(Dropdown.Callback, Dropdown.Value)Library:SafeCallback(Dropdown.Changed, Dropdown.Value)endfunction Dropdown:Destroy()DropdownFrame:Destroy()Library.Options[Idx] = nilendDropdown:BuildDropdownList()Dropdown:Display()local Defaults ={}if type(Config.Default) == "string" thenlocal Idx = table.find(Dropdown.Values, Config.Default)if Idx thentable.insert(Defaults, Idx)endelseif type(Config.Default) == "table" thenfor _, Value in next, Config.Default dolocal Idx = table.find(Dropdown.Values, Value)if Idx thentable.insert(Defaults, Idx)endendelseif type(Config.Default) == "number" and Dropdown.Values[Config.Default] ~= nil thentable.insert(Defaults, Config.Default)endif next(Defaults) thenfor i = 1, #Defaults dolocal Index = Defaults[i]if Config.Multi thenDropdown.Value[Dropdown.Values[Index]] = trueelseDropdown.Value = Dropdown.Values[Index]endif not Config.Multi thenbreakendendDropdown:BuildDropdownList()Dropdown:Display()endLibrary.Options[Idx] = Dropdownreturn Dropdownendreturn Elementend)()ElementsTable.Paragraph = (function()local Paragraph ={}Paragraph.__index = ParagraphParagraph.__type = "Paragraph"function Paragraph:New(Config)assert(Config.Title, "Paragraph - Missing Title")Config.Content = Config.Content or ""local Paragraph = Components.Element(Config.Title, Config.Content, Paragraph.Container, false, Config)Paragraph.Frame.BackgroundTransparency = 0.92Paragraph.Border.Transparency = 0.6Paragraph.SetTitle = Paragraph.SetTitleParagraph.SetDesc = Paragraph.SetDescParagraph.Visible = Paragraph.VisibleParagraph.Elements = Paragraphreturn Paragraphendreturn Paragraphend)()ElementsTable.Slider = (function()local Element ={}Element.__index = ElementElement.__type = "Slider"function Element:New(Idx, Config)assert(Config.Title, "Slider - Missing Title.")assert(Config.Default, "Slider - Missing default value.")assert(Config.Min, "Slider - Missing minimum value.")assert(Config.Max, "Slider - Missing maximum value.")assert(Config.Rounding, "Slider - Missing rounding value.")local Slider ={Value = nil,Min = Config.Min,Max = Config.Max,Rounding = Config.Rounding,Callback = Config.Callback or function(Value) end,Type = "Slider",}local Dragging = falselocal SliderFrame = Components.Element(Config.Title, Config.Description, self.Container, false, Config)SliderFrame.DescLabel.Size = UDim2.new(1, -170, 0, 14)Slider.Elements = SliderFrameSlider.SetTitle = SliderFrame.SetTitleSlider.SetDesc = SliderFrame.SetDescSlider.Visible = SliderFrame.Visiblelocal SliderDot = New("ImageLabel",{AnchorPoint = Vector2.new(0, 0.5),Position = UDim2.new(0, -7, 0.5, 0),Size = UDim2.fromOffset(14, 14),Image = "http://www.roblox.com/asset/?id=12266946128",ThemeTag ={ImageColor3 = "Accent",},})local SliderRail = New("Frame",{BackgroundTransparency = 1,Position = UDim2.fromOffset(7, 0),Size = UDim2.new(1, -14, 1, 0),},{SliderDot,})local SliderFill = New("Frame",{Size = UDim2.new(0, 0, 1, 0),ThemeTag ={BackgroundColor3 = "Accent",},},{New("UICorner",{CornerRadius = UDim.new(1, 0),}),})local SliderDisplay = New("TextLabel",{FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json"),Text = "Value",TextSize = 12,TextWrapped = true,TextXAlignment = Enum.TextXAlignment.Right,BackgroundColor3 = Color3.fromRGB(255, 255, 255),BackgroundTransparency = 1,Size = UDim2.new(0, 100, 0, 14),Position = UDim2.new(0, -4, 0.5, 0),AnchorPoint = Vector2.new(1, 0.5),ThemeTag ={TextColor3 = "SubText",},})local SliderInner = New("Frame",{Size = UDim2.new(1, 0, 0, 4),AnchorPoint = Vector2.new(1, 0.5),Position = UDim2.new(1, -10, 0.5, 0),BackgroundTransparency = 0.4,Parent = SliderFrame.Frame,ThemeTag ={BackgroundColor3 = "SliderRail",},},{New("UICorner",{CornerRadius = UDim.new(1, 0),}),New("UISizeConstraint",{MaxSize = Vector2.new(150, math.huge),}),SliderDisplay,SliderFill,SliderRail,})Creator.AddSignal(SliderDot.InputBegan, function(Input)ifInput.UserInputType == Enum.UserInputType.MouseButton1or Input.UserInputType == Enum.UserInputType.TouchthenDragging = trueendend)Creator.AddSignal(SliderDot.InputEnded, function(Input)ifInput.UserInputType == Enum.UserInputType.MouseButton1or Input.UserInputType == Enum.UserInputType.TouchthenDragging = falseendend)Creator.AddSignal(UserInputService.InputChanged, function(Input)ifDraggingand (Input.UserInputType == Enum.UserInputType.MouseMovementor Input.UserInputType == Enum.UserInputType.Touch)thenlocal SizeScale =math.clamp((Input.Position.X - SliderRail.AbsolutePosition.X) / SliderRail.AbsoluteSize.X, 0, 1)Slider:SetValue(Slider.Min + ((Slider.Max - Slider.Min) * SizeScale))endend)function Slider:OnChanged(Func)Slider.Changed = FuncFunc(Slider.Value)endfunction Slider:SetValue(Value)self.Value = Library:Round(math.clamp(Value, Slider.Min, Slider.Max), Slider.Rounding)SliderDot.Position = UDim2.new((self.Value - Slider.Min) / (Slider.Max - Slider.Min), -7, 0.5, 0)SliderFill.Size = UDim2.fromScale((self.Value - Slider.Min) / (Slider.Max - Slider.Min), 1)SliderDisplay.Text = tostring(self.Value)Library:SafeCallback(Slider.Callback, self.Value)Library:SafeCallback(Slider.Changed, self.Value)endfunction Slider:Destroy()SliderFrame:Destroy()Library.Options[Idx] = nilendSlider:SetValue(Config.Default)Library.Options[Idx] = Sliderreturn Sliderendreturn Elementend)()ElementsTable.Keybind = (function()local Element ={}Element.__index = ElementElement.__type = "Keybind"function Element:New(Idx, Config)assert(Config.Title, "KeyBind - Missing Title")assert(Config.Default, "KeyBind - Missing default value.")local Keybind ={Value = Config.Default,Toggled = false,Mode = Config.Mode or "Toggle",Type = "Keybind",Callback = Config.Callback or function(Value) end,ChangedCallback = Config.ChangedCallback or function(New) end,}local Picking = falselocal KeybindFrame = Components.Element(Config.Title, Config.Description, self.Container, true)Keybind.SetTitle = KeybindFrame.SetTitleKeybind.SetDesc = KeybindFrame.SetDescKeybind.Visible = KeybindFrame.VisibleKeybind.Elements = KeybindFramelocal KeybindDisplayLabel = New("TextLabel",{FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal),Text = Config.Default,TextColor3 = Color3.fromRGB(240, 240, 240),TextSize = 13,TextXAlignment = Enum.TextXAlignment.Center,Size = UDim2.new(0, 0, 0, 14),Position = UDim2.new(0, 0, 0.5, 0),AnchorPoint = Vector2.new(0, 0.5),BackgroundColor3 = Color3.fromRGB(255, 255, 255),AutomaticSize = Enum.AutomaticSize.X,BackgroundTransparency = 1,ThemeTag ={TextColor3 = "Text",},})local KeybindDisplayFrame = New("TextButton",{Size = UDim2.fromOffset(0, 30),Position = UDim2.new(1, -10, 0.5, 0),AnchorPoint = Vector2.new(1, 0.5),BackgroundTransparency = 0.9,Parent = KeybindFrame.Frame,AutomaticSize = Enum.AutomaticSize.X,ThemeTag ={BackgroundColor3 = "Keybind",},},{New("UICorner",{CornerRadius = UDim.new(0, 5),}),New("UIPadding",{PaddingLeft = UDim.new(0, 8),PaddingRight = UDim.new(0, 8),}),New("UIStroke",{Transparency = 0.5,ApplyStrokeMode = Enum.ApplyStrokeMode.Border,ThemeTag ={Color = "InElementBorder",},}),KeybindDisplayLabel,})function Keybind:GetState()if UserInputService:GetFocusedTextBox() and Keybind.Mode ~= "Always" thenreturn falseendif Keybind.Mode == "Always" thenreturn trueelseif Keybind.Mode == "Hold" thenif Keybind.Value == "None" thenreturn falseendlocal Key = Keybind.Valueif Key == "MouseLeft" or Key == "MouseRight" thenreturn Key == "MouseLeft" and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)or Key == "MouseRight"and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2)elsereturn UserInputService:IsKeyDown(Enum.KeyCode[Keybind.Value])endelsereturn Keybind.Toggledendendfunction Keybind:SetValue(Key, Mode)Key = Key or Keybind.KeyMode = Mode or Keybind.ModeKeybindDisplayLabel.Text = KeyKeybind.Value = KeyKeybind.Mode = Modeendfunction Keybind:OnClick(Callback)Keybind.Clicked = Callbackendfunction Keybind:OnChanged(Callback)Keybind.Changed = CallbackCallback(Keybind.Value)endfunction Keybind:DoClick()Library:SafeCallback(Keybind.Callback, Keybind.Toggled)Library:SafeCallback(Keybind.Clicked, Keybind.Toggled)endfunction Keybind:Destroy()KeybindFrame:Destroy()Library.Options[Idx] = nilendCreator.AddSignal(KeybindDisplayFrame.InputBegan, function(Input)ifInput.UserInputType == Enum.UserInputType.MouseButton1or Input.UserInputType == Enum.UserInputType.TouchthenPicking = trueKeybindDisplayLabel.Text = "..."wait(0.2)local EventEvent = UserInputService.InputBegan:Connect(function(Input)local Keyif Input.UserInputType == Enum.UserInputType.Keyboard thenKey = Input.KeyCode.Nameelseif Input.UserInputType == Enum.UserInputType.MouseButton1 thenKey = "MouseLeft"elseif Input.UserInputType == Enum.UserInputType.MouseButton2 thenKey = "MouseRight"endlocal EndedEventEndedEvent = UserInputService.InputEnded:Connect(function(Input)ifInput.KeyCode.Name == Keyor Key == "MouseLeft" and Input.UserInputType == Enum.UserInputType.MouseButton1or Key == "MouseRight" and Input.UserInputType == Enum.UserInputType.MouseButton2thenPicking = falseKeybindDisplayLabel.Text = KeyKeybind.Value = KeyLibrary:SafeCallback(Keybind.ChangedCallback, Input.KeyCode or Input.UserInputType)Library:SafeCallback(Keybind.Changed, Input.KeyCode or Input.UserInputType)Event:Disconnect()EndedEvent:Disconnect()endend)end)endend)Creator.AddSignal(UserInputService.InputBegan, function(Input)if not Picking and not UserInputService:GetFocusedTextBox() thenif Keybind.Mode == "Toggle" thenlocal Key = Keybind.Valueif Key == "MouseLeft" or Key == "MouseRight" thenifKey == "MouseLeft" and Input.UserInputType == Enum.UserInputType.MouseButton1or Key == "MouseRight" and Input.UserInputType == Enum.UserInputType.MouseButton2thenKeybind.Toggled = not Keybind.ToggledKeybind:DoClick()endelseif Input.UserInputType == Enum.UserInputType.Keyboard thenif Input.KeyCode.Name == Key thenKeybind.Toggled = not Keybind.ToggledKeybind:DoClick()endendendendend)Library.Options[Idx] = Keybindreturn Keybindendreturn Elementend)()ElementsTable.Colorpicker = (function()local Element ={}Element.__index = ElementElement.__type = "Colorpicker"function Element:New(Idx, Config)assert(Config.Title, "Colorpicker - Missing Title")assert(Config.Default, "AddColorPicker:Missing default value.")local Colorpicker ={Value = Config.Default,Transparency = Config.Transparency or 0,Type = "Colorpicker",Title = type(Config.Title) == "string" and Config.Title or "Colorpicker",Callback = Config.Callback or function(Color) end,}function Colorpicker:SetHSVFromRGB(Color)local H, S, V = Color3.toHSV(Color)Colorpicker.Hue = HColorpicker.Sat = SColorpicker.Vib = VendColorpicker:SetHSVFromRGB(Colorpicker.Value)local ColorpickerFrame = Components.Element(Config.Title, Config.Description, self.Container, true)Colorpicker.SetTitle = ColorpickerFrame.SetTitleColorpicker.SetDesc = ColorpickerFrame.SetDescColorpicker.Visible = ColorpickerFrame.VisibleColorpicker.Elements = ColorpickerFramelocal DisplayFrameColor = New("Frame",{Size = UDim2.fromScale(1, 1),BackgroundColor3 = Colorpicker.Value,Parent = ColorpickerFrame.Frame,},{New("UICorner",{CornerRadius = UDim.new(0, 4),}),})local DisplayFrame = New("ImageLabel",{Size = UDim2.fromOffset(26, 26),Position = UDim2.new(1, -10, 0.5, 0),AnchorPoint = Vector2.new(1, 0.5),Parent = ColorpickerFrame.Frame,Image = "http://www.roblox.com/asset/?id=14204231522",ImageTransparency = 0.45,ScaleType = Enum.ScaleType.Tile,TileSize = UDim2.fromOffset(40, 40),},{New("UICorner",{CornerRadius = UDim.new(0, 4),}),DisplayFrameColor,})local function CreateColorDialog()local Dialog = Components.Dialog:Create()Dialog.Title.Text = Colorpicker.TitleDialog.Root.Size = UDim2.fromOffset(430, 330)local Hue, Sat, Vib = Colorpicker.Hue, Colorpicker.Sat, Colorpicker.Viblocal Transparency = Colorpicker.Transparencylocal function CreateInput()local Box = Components.Textbox()Box.Frame.Parent = Dialog.RootBox.Frame.Size = UDim2.new(0, 90, 0, 32)return Boxendlocal function CreateInputLabel(Text, Pos)return New("TextLabel",{FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json",Enum.FontWeight.Medium,Enum.FontStyle.Normal),Text = Text,TextColor3 = Color3.fromRGB(240, 240, 240),TextSize = 13,TextXAlignment = Enum.TextXAlignment.Left,Size = UDim2.new(1, 0, 0, 32),Position = Pos,BackgroundTransparency = 1,Parent = Dialog.Root,ThemeTag ={TextColor3 = "Text",},})endlocal function GetRGB()local Value = Color3.fromHSV(Hue, Sat, Vib)return{R = math.floor(Value.r * 255), G = math.floor(Value.g * 255), B = math.floor(Value.b * 255)}endlocal SatCursor = New("ImageLabel",{Size = UDim2.new(0, 18, 0, 18),ScaleType = Enum.ScaleType.Fit,AnchorPoint = Vector2.new(0.5, 0.5),BackgroundTransparency = 1,Image = "http://www.roblox.com/asset/?id=4805639000",})local SatVibMap = New("ImageLabel",{Size = UDim2.fromOffset(180, 160),Position = UDim2.fromOffset(20, 55),Image = "rbxassetid://4155801252",BackgroundColor3 = Colorpicker.Value,BackgroundTransparency = 0,Parent = Dialog.Root,},{New("UICorner",{CornerRadius = UDim.new(0, 4),}),SatCursor,})local OldColorFrame = New("Frame",{BackgroundColor3 = Colorpicker.Value,Size = UDim2.fromScale(1, 1),BackgroundTransparency = Colorpicker.Transparency,},{New("UICorner",{CornerRadius = UDim.new(0, 4),}),})local OldColorFrameChecker = New("ImageLabel",{Image = "http://www.roblox.com/asset/?id=14204231522",ImageTransparency = 0.45,ScaleType = Enum.ScaleType.Tile,TileSize = UDim2.fromOffset(40, 40),BackgroundTransparency = 1,Position = UDim2.fromOffset(112, 220),Size = UDim2.fromOffset(88, 24),Parent = Dialog.Root,},{New("UICorner",{CornerRadius = UDim.new(0, 4),}),New("UIStroke",{Thickness = 2,Transparency = 0.75,}),OldColorFrame,})local DialogDisplayFrame = New("Frame",{BackgroundColor3 = Colorpicker.Value,Size = UDim2.fromScale(1, 1),BackgroundTransparency = 0,},{New("UICorner",{CornerRadius = UDim.new(0, 4),}),})local DialogDisplayFrameChecker = New("ImageLabel",{Image = "http://www.roblox.com/asset/?id=14204231522",ImageTransparency = 0.45,ScaleType = Enum.ScaleType.Tile,TileSize = UDim2.fromOffset(40, 40),BackgroundTransparency = 1,Position = UDim2.fromOffset(20, 220),Size = UDim2.fromOffset(88, 24),Parent = Dialog.Root,},{New("UICorner",{CornerRadius = UDim.new(0, 4),}),New("UIStroke",{Thickness = 2,Transparency = 0.75,}),DialogDisplayFrame,})local SequenceTable ={}for Color = 0, 1, 0.1 dotable.insert(SequenceTable, ColorSequenceKeypoint.new(Color, Color3.fromHSV(Color, 1, 1)))endlocal HueSliderGradient = New("UIGradient",{Color = ColorSequence.new(SequenceTable),Rotation = 90,})local HueDragHolder = New("Frame",{Size = UDim2.new(1, 0, 1, -10),Position = UDim2.fromOffset(0, 5),BackgroundTransparency = 1,})local HueDrag = New("ImageLabel",{Size = UDim2.fromOffset(14, 14),Image = "http://www.roblox.com/asset/?id=12266946128",Parent = HueDragHolder,ThemeTag ={ImageColor3 = "DialogInput",},})local HueSlider = New("Frame",{Size = UDim2.fromOffset(12, 190),Position = UDim2.fromOffset(210, 55),Parent = Dialog.Root,},{New("UICorner",{CornerRadius = UDim.new(1, 0),}),HueSliderGradient,HueDragHolder,})local HexInput = CreateInput()HexInput.Frame.Position = UDim2.fromOffset(Config.Transparency and 260 or 240, 55)CreateInputLabel("Hex", UDim2.fromOffset(Config.Transparency and 360 or 340, 55))local RedInput = CreateInput()RedInput.Frame.Position = UDim2.fromOffset(Config.Transparency and 260 or 240, 95)CreateInputLabel("Red", UDim2.fromOffset(Config.Transparency and 360 or 340, 95))local GreenInput = CreateInput()GreenInput.Frame.Position = UDim2.fromOffset(Config.Transparency and 260 or 240, 135)CreateInputLabel("Green", UDim2.fromOffset(Config.Transparency and 360 or 340, 135))local BlueInput = CreateInput()BlueInput.Frame.Position = UDim2.fromOffset(Config.Transparency and 260 or 240, 175)CreateInputLabel("Blue", UDim2.fromOffset(Config.Transparency and 360 or 340, 175))local AlphaInputif Config.Transparency thenAlphaInput = CreateInput()AlphaInput.Frame.Position = UDim2.fromOffset(260, 215)CreateInputLabel("Alpha", UDim2.fromOffset(360, 215))endlocal TransparencySlider, TransparencyDrag, TransparencyColorif Config.Transparency thenlocal TransparencyDragHolder = New("Frame",{Size = UDim2.new(1, 0, 1, -10),Position = UDim2.fromOffset(0, 5),BackgroundTransparency = 1,})TransparencyDrag = New("ImageLabel",{Size = UDim2.fromOffset(14, 14),Image = "http://www.roblox.com/asset/?id=12266946128",Parent = TransparencyDragHolder,ThemeTag ={ImageColor3 = "DialogInput",},})TransparencyColor = New("Frame",{Size = UDim2.fromScale(1, 1),},{New("UIGradient",{Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0),NumberSequenceKeypoint.new(1, 1),}),Rotation = 270,}),New("UICorner",{CornerRadius = UDim.new(1, 0),}),})TransparencySlider = New("Frame",{Size = UDim2.fromOffset(12, 190),Position = UDim2.fromOffset(230, 55),Parent = Dialog.Root,BackgroundTransparency = 1,},{New("UICorner",{CornerRadius = UDim.new(1, 0),}),New("ImageLabel",{Image = "http://www.roblox.com/asset/?id=14204231522",ImageTransparency = 0.45,ScaleType = Enum.ScaleType.Tile,TileSize = UDim2.fromOffset(40, 40),BackgroundTransparency = 1,Size = UDim2.fromScale(1, 1),Parent = Dialog.Root,},{New("UICorner",{CornerRadius = UDim.new(1, 0),}),}),TransparencyColor,TransparencyDragHolder,})endlocal function Display()SatVibMap.BackgroundColor3 = Color3.fromHSV(Hue, 1, 1)HueDrag.Position = UDim2.new(0, -1, Hue, -6)SatCursor.Position = UDim2.new(Sat, 0, 1 - Vib, 0)DialogDisplayFrame.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Vib)HexInput.Input.Text = "#" .. Color3.fromHSV(Hue, Sat, Vib):ToHex()RedInput.Input.Text = GetRGB()["R"]GreenInput.Input.Text = GetRGB()["G"]BlueInput.Input.Text = GetRGB()["B"]if Config.Transparency thenTransparencyColor.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Vib)DialogDisplayFrame.BackgroundTransparency = TransparencyTransparencyDrag.Position = UDim2.new(0, -1, 1 - Transparency, -6)AlphaInput.Input.Text = Library:Round((1 - Transparency) * 100, 0) .. "%"endendCreator.AddSignal(HexInput.Input.FocusLost, function(Enter)if Enter thenlocal Success, Result = pcall(Color3.fromHex, HexInput.Input.Text)if Success and typeof(Result) == "Color3" thenHue, Sat, Vib = Color3.toHSV(Result)endendDisplay()end)Creator.AddSignal(RedInput.Input.FocusLost, function(Enter)if Enter thenlocal CurrentColor = GetRGB()local Success, Result = pcall(Color3.fromRGB, RedInput.Input.Text, CurrentColor["G"], CurrentColor["B"])if Success and typeof(Result) == "Color3" thenif tonumber(RedInput.Input.Text) <= 255 thenHue, Sat, Vib = Color3.toHSV(Result)endendendDisplay()end)Creator.AddSignal(GreenInput.Input.FocusLost, function(Enter)if Enter thenlocal CurrentColor = GetRGB()local Success, Result =pcall(Color3.fromRGB, CurrentColor["R"], GreenInput.Input.Text, CurrentColor["B"])if Success and typeof(Result) == "Color3" thenif tonumber(GreenInput.Input.Text) <= 255 thenHue, Sat, Vib = Color3.toHSV(Result)endendendDisplay()end)Creator.AddSignal(BlueInput.Input.FocusLost, function(Enter)if Enter thenlocal CurrentColor = GetRGB()local Success, Result =pcall(Color3.fromRGB, CurrentColor["R"], CurrentColor["G"], BlueInput.Input.Text)if Success and typeof(Result) == "Color3" thenif tonumber(BlueInput.Input.Text) <= 255 thenHue, Sat, Vib = Color3.toHSV(Result)endendendDisplay()end)if Config.Transparency thenCreator.AddSignal(AlphaInput.Input.FocusLost, function(Enter)if Enter thenpcall(function()local Value = tonumber(AlphaInput.Input.Text)if Value >= 0 and Value <= 100 thenTransparency = 1 - Value * 0.01endend)endDisplay()end)endCreator.AddSignal(SatVibMap.InputBegan, function(Input)ifInput.UserInputType == Enum.UserInputType.MouseButton1or Input.UserInputType == Enum.UserInputType.Touchthenwhile UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) dolocal MinX = SatVibMap.AbsolutePosition.Xlocal MaxX = MinX + SatVibMap.AbsoluteSize.Xlocal MouseX = math.clamp(Mouse.X, MinX, MaxX)local MinY = SatVibMap.AbsolutePosition.Ylocal MaxY = MinY + SatVibMap.AbsoluteSize.Ylocal MouseY = math.clamp(Mouse.Y, MinY, MaxY)Sat = (MouseX - MinX) / (MaxX - MinX)Vib = 1 - ((MouseY - MinY) / (MaxY - MinY))Display()RenderStepped:Wait()endendend)Creator.AddSignal(HueSlider.InputBegan, function(Input)ifInput.UserInputType == Enum.UserInputType.MouseButton1or Input.UserInputType == Enum.UserInputType.Touchthenwhile UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) dolocal MinY = HueSlider.AbsolutePosition.Ylocal MaxY = MinY + HueSlider.AbsoluteSize.Ylocal MouseY = math.clamp(Mouse.Y, MinY, MaxY)Hue = ((MouseY - MinY) / (MaxY - MinY))Display()RenderStepped:Wait()endendend)if Config.Transparency thenCreator.AddSignal(TransparencySlider.InputBegan, function(Input)if Input.UserInputType == Enum.UserInputType.MouseButton1 thenwhile UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) dolocal MinY = TransparencySlider.AbsolutePosition.Ylocal MaxY = MinY + TransparencySlider.AbsoluteSize.Ylocal MouseY = math.clamp(Mouse.Y, MinY, MaxY)Transparency = 1 - ((MouseY - MinY) / (MaxY - MinY))Display()RenderStepped:Wait()endendend)endDisplay()Dialog:Button("Done", function()Colorpicker:SetValue({Hue, Sat, Vib}, Transparency)end)Dialog:Button("Cancel")Dialog:Open()endfunction Colorpicker:Display()Colorpicker.Value = Color3.fromHSV(Colorpicker.Hue, Colorpicker.Sat, Colorpicker.Vib)DisplayFrameColor.BackgroundColor3 = Colorpicker.ValueDisplayFrameColor.BackgroundTransparency = Colorpicker.TransparencyElement.Library:SafeCallback(Colorpicker.Callback, Colorpicker.Value)Element.Library:SafeCallback(Colorpicker.Changed, Colorpicker.Value)endfunction Colorpicker:SetValue(HSV, Transparency)local Color = Color3.fromHSV(HSV[1], HSV[2], HSV[3])Colorpicker.Transparency = Transparency or 0Colorpicker:SetHSVFromRGB(Color)Colorpicker:Display()endfunction Colorpicker:SetValueRGB(Color, Transparency)Colorpicker.Transparency = Transparency or 0Colorpicker:SetHSVFromRGB(Color)Colorpicker:Display()endfunction Colorpicker:OnChanged(Func)Colorpicker.Changed = FuncFunc(Colorpicker.Value)endfunction Colorpicker:Destroy()ColorpickerFrame:Destroy()Library.Options[Idx] = nilendCreator.AddSignal(ColorpickerFrame.Frame.MouseButton1Click, function()CreateColorDialog()end)Colorpicker:Display()Library.Options[Idx] = Colorpickerreturn Colorpickerendreturn Elementend)()ElementsTable.Input = (function()local Element ={}Element.__index = ElementElement.__type = "Input"function Element:New(Idx, Config)assert(Config.Title, "Input - Missing Title")Config.Callback = Config.Callback or function() endlocal Input ={Value = Config.Default or "",Numeric = Config.Numeric or false,Finished = Config.Finished or false,Callback = Config.Callback or function(Value) end,Type = "Input",}local InputFrame = Components.Element(Config.Title, Config.Description, self.Container, false)Input.SetTitle = InputFrame.SetTitleInput.SetDesc = InputFrame.SetDescInput.Visible = InputFrame.VisibleInput.Elements = InputFramelocal Textbox = Components.Textbox(InputFrame.Frame, true)Textbox.Frame.Position = UDim2.new(1, -10, 0.5, 0)Textbox.Frame.AnchorPoint = Vector2.new(1, 0.5)Textbox.Frame.Size = UDim2.fromOffset(160, 30)Textbox.Input.Text = Config.Default or ""Textbox.Input.PlaceholderText = Config.Placeholder or ""local Box = Textbox.Inputfunction Input:SetValue(Text)if Config.MaxLength and #Text > Config.MaxLength thenText = Text:sub(1, Config.MaxLength)endif Input.Numeric thenif (not tonumber(Text)) and Text:len() > 0 thenText = Input.ValueendendInput.Value = TextBox.Text = TextLibrary:SafeCallback(Input.Callback, Input.Value)Library:SafeCallback(Input.Changed, Input.Value)endif Input.Finished thenAddSignal(Box.FocusLost, function(enter)if not enter thenreturnendInput:SetValue(Box.Text)end)elseAddSignal(Box:GetPropertyChangedSignal("Text"), function()Input:SetValue(Box.Text)end)endfunction Input:OnChanged(Func)Input.Changed = FuncFunc(Input.Value)endfunction Input:Destroy()InputFrame:Destroy()Library.Options[Idx] = nilendLibrary.Options[Idx] = Inputreturn Inputendreturn Elementend)()local NotificationModule = Components.NotificationNotificationModule:Init(GUI)local New = Creator.Newlocal Icons ={["lucide-accessibility"] = "rbxassetid://10709751939",["lucide-activity"] = "rbxassetid://10709752035",["lucide-air-vent"] = "rbxassetid://10709752131",["lucide-airplay"] = "rbxassetid://10709752254",["lucide-alarm-check"] = "rbxassetid://10709752405",["lucide-alarm-clock"] = "rbxassetid://10709752630",["lucide-alarm-clock-off"] = "rbxassetid://10709752508",["lucide-alarm-minus"] = "rbxassetid://10709752732",["lucide-alarm-plus"] = "rbxassetid://10709752825",["lucide-album"] = "rbxassetid://10709752906",["lucide-alert-circle"] = "rbxassetid://10709752996",["lucide-alert-octagon"] = "rbxassetid://10709753064",["lucide-alert-triangle"] = "rbxassetid://10709753149",["lucide-align-center"] = "rbxassetid://10709753570",["lucide-align-center-horizontal"] = "rbxassetid://10709753272",["lucide-align-center-vertical"] = "rbxassetid://10709753421",["lucide-align-end-horizontal"] = "rbxassetid://10709753692",["lucide-align-end-vertical"] = "rbxassetid://10709753808",["lucide-align-horizontal-distribute-center"] = "rbxassetid://10747779791",["lucide-align-horizontal-distribute-end"] = "rbxassetid://10747784534",["lucide-align-horizontal-distribute-start"] = "rbxassetid://10709754118",["lucide-align-horizontal-justify-center"] = "rbxassetid://10709754204",["lucide-align-horizontal-justify-end"] = "rbxassetid://10709754317",["lucide-align-horizontal-justify-start"] = "rbxassetid://10709754436",["lucide-align-horizontal-space-around"] = "rbxassetid://10709754590",["lucide-align-horizontal-space-between"] = "rbxassetid://10709754749",["lucide-align-justify"] = "rbxassetid://10709759610",["lucide-align-left"] = "rbxassetid://10709759764",["lucide-align-right"] = "rbxassetid://10709759895",["lucide-align-start-horizontal"] = "rbxassetid://10709760051",["lucide-align-start-vertical"] = "rbxassetid://10709760244",["lucide-align-vertical-distribute-center"] = "rbxassetid://10709760351",["lucide-align-vertical-distribute-end"] = "rbxassetid://10709760434",["lucide-align-vertical-distribute-start"] = "rbxassetid://10709760612",["lucide-align-vertical-justify-center"] = "rbxassetid://10709760814",["lucide-align-vertical-justify-end"] = "rbxassetid://10709761003",["lucide-align-vertical-justify-start"] = "rbxassetid://10709761176",["lucide-align-vertical-space-around"] = "rbxassetid://10709761324",["lucide-align-vertical-space-between"] = "rbxassetid://10709761434",["lucide-anchor"] = "rbxassetid://10709761530",["lucide-angry"] = "rbxassetid://10709761629",["lucide-annoyed"] = "rbxassetid://10709761722",["lucide-aperture"] = "rbxassetid://10709761813",["lucide-apple"] = "rbxassetid://10709761889",["lucide-archive"] = "rbxassetid://10709762233",["lucide-archive-restore"] = "rbxassetid://10709762058",["lucide-armchair"] = "rbxassetid://10709762327",["lucide-arrow-big-down"] = "rbxassetid://10747796644",["lucide-arrow-big-left"] = "rbxassetid://10709762574",["lucide-arrow-big-right"] = "rbxassetid://10709762727",["lucide-arrow-big-up"] = "rbxassetid://10709762879",["lucide-arrow-down"] = "rbxassetid://10709767827",["lucide-arrow-down-circle"] = "rbxassetid://10709763034",["lucide-arrow-down-left"] = "rbxassetid://10709767656",["lucide-arrow-down-right"] = "rbxassetid://10709767750",["lucide-arrow-left"] = "rbxassetid://10709768114",["lucide-arrow-left-circle"] = "rbxassetid://10709767936",["lucide-arrow-left-right"] = "rbxassetid://10709768019",["lucide-arrow-right"] = "rbxassetid://10709768347",["lucide-arrow-right-circle"] = "rbxassetid://10709768226",["lucide-arrow-up"] = "rbxassetid://10709768939",["lucide-arrow-up-circle"] = "rbxassetid://10709768432",["lucide-arrow-up-down"] = "rbxassetid://10709768538",["lucide-arrow-up-left"] = "rbxassetid://10709768661",["lucide-arrow-up-right"] = "rbxassetid://10709768787",["lucide-asterisk"] = "rbxassetid://10709769095",["lucide-at-sign"] = "rbxassetid://10709769286",["lucide-award"] = "rbxassetid://10709769406",["lucide-axe"] = "rbxassetid://10709769508",["lucide-axis-3d"] = "rbxassetid://10709769598",["lucide-baby"] = "rbxassetid://10709769732",["lucide-backpack"] = "rbxassetid://10709769841",["lucide-baggage-claim"] = "rbxassetid://10709769935",["lucide-banana"] = "rbxassetid://10709770005",["lucide-banknote"] = "rbxassetid://10709770178",["lucide-bar-chart"] = "rbxassetid://10709773755",["lucide-bar-chart-2"] = "rbxassetid://10709770317",["lucide-bar-chart-3"] = "rbxassetid://10709770431",["lucide-bar-chart-4"] = "rbxassetid://10709770560",["lucide-bar-chart-horizontal"] = "rbxassetid://10709773669",["lucide-barcode"] = "rbxassetid://10747360675",["lucide-baseline"] = "rbxassetid://10709773863",["lucide-bath"] = "rbxassetid://10709773963",["lucide-battery"] = "rbxassetid://10709774640",["lucide-battery-charging"] = "rbxassetid://10709774068",["lucide-battery-full"] = "rbxassetid://10709774206",["lucide-battery-low"] = "rbxassetid://10709774370",["lucide-battery-medium"] = "rbxassetid://10709774513",["lucide-beaker"] = "rbxassetid://10709774756",["lucide-bed"] = "rbxassetid://10709775036",["lucide-bed-double"] = "rbxassetid://10709774864",["lucide-bed-single"] = "rbxassetid://10709774968",["lucide-beer"] = "rbxassetid://10709775167",["lucide-bell"] = "rbxassetid://10709775704",["lucide-bell-minus"] = "rbxassetid://10709775241",["lucide-bell-off"] = "rbxassetid://10709775320",["lucide-bell-plus"] = "rbxassetid://10709775448",["lucide-bell-ring"] = "rbxassetid://10709775560",["lucide-bike"] = "rbxassetid://10709775894",["lucide-binary"] = "rbxassetid://10709776050",["lucide-bitcoin"] = "rbxassetid://10709776126",["lucide-bluetooth"] = "rbxassetid://10709776655",["lucide-bluetooth-connected"] = "rbxassetid://10709776240",["lucide-bluetooth-off"] = "rbxassetid://10709776344",["lucide-bluetooth-searching"] = "rbxassetid://10709776501",["lucide-bold"] = "rbxassetid://10747813908",["lucide-bomb"] = "rbxassetid://10709781460",["lucide-bone"] = "rbxassetid://10709781605",["lucide-book"] = "rbxassetid://10709781824",["lucide-book-open"] = "rbxassetid://10709781717",["lucide-bookmark"] = "rbxassetid://10709782154",["lucide-bookmark-minus"] = "rbxassetid://10709781919",["lucide-bookmark-plus"] = "rbxassetid://10709782044",["lucide-bot"] = "rbxassetid://10709782230",["lucide-box"] = "rbxassetid://10709782497",["lucide-box-select"] = "rbxassetid://10709782342",["lucide-boxes"] = "rbxassetid://10709782582",["lucide-briefcase"] = "rbxassetid://10709782662",["lucide-brush"] = "rbxassetid://10709782758",["lucide-bug"] = "rbxassetid://10709782845",["lucide-building"] = "rbxassetid://10709783051",["lucide-building-2"] = "rbxassetid://10709782939",["lucide-bus"] = "rbxassetid://10709783137",["lucide-cake"] = "rbxassetid://10709783217",["lucide-calculator"] = "rbxassetid://10709783311",["lucide-calendar"] = "rbxassetid://10709789505",["lucide-calendar-check"] = "rbxassetid://10709783474",["lucide-calendar-check-2"] = "rbxassetid://10709783392",["lucide-calendar-clock"] = "rbxassetid://10709783577",["lucide-calendar-days"] = "rbxassetid://10709783673",["lucide-calendar-heart"] = "rbxassetid://10709783835",["lucide-calendar-minus"] = "rbxassetid://10709783959",["lucide-calendar-off"] = "rbxassetid://10709788784",["lucide-calendar-plus"] = "rbxassetid://10709788937",["lucide-calendar-range"] = "rbxassetid://10709789053",["lucide-calendar-search"] = "rbxassetid://10709789200",["lucide-calendar-x"] = "rbxassetid://10709789407",["lucide-calendar-x-2"] = "rbxassetid://10709789329",["lucide-camera"] = "rbxassetid://10709789686",["lucide-camera-off"] = "rbxassetid://10747822677",["lucide-car"] = "rbxassetid://10709789810",["lucide-carrot"] = "rbxassetid://10709789960",["lucide-cast"] = "rbxassetid://10709790097",["lucide-charge"] = "rbxassetid://10709790202",["lucide-check"] = "rbxassetid://10709790644",["lucide-check-circle"] = "rbxassetid://10709790387",["lucide-check-circle-2"] = "rbxassetid://10709790298",["lucide-check-square"] = "rbxassetid://10709790537",["lucide-chef-hat"] = "rbxassetid://10709790757",["lucide-cherry"] = "rbxassetid://10709790875",["lucide-chevron-down"] = "rbxassetid://10709790948",["lucide-chevron-first"] = "rbxassetid://10709791015",["lucide-chevron-last"] = "rbxassetid://10709791130",["lucide-chevron-left"] = "rbxassetid://10709791281",["lucide-chevron-right"] = "rbxassetid://10709791437",["lucide-chevron-up"] = "rbxassetid://10709791523",["lucide-chevrons-down"] = "rbxassetid://10709796864",["lucide-chevrons-down-up"] = "rbxassetid://10709791632",["lucide-chevrons-left"] = "rbxassetid://10709797151",["lucide-chevrons-left-right"] = "rbxassetid://10709797006",["lucide-chevrons-right"] = "rbxassetid://10709797382",["lucide-chevrons-right-left"] = "rbxassetid://10709797274",["lucide-chevrons-up"] = "rbxassetid://10709797622",["lucide-chevrons-up-down"] = "rbxassetid://10709797508",["lucide-chrome"] = "rbxassetid://10709797725",["lucide-circle"] = "rbxassetid://10709798174",["lucide-circle-dot"] = "rbxassetid://10709797837",["lucide-circle-ellipsis"] = "rbxassetid://10709797985",["lucide-circle-slashed"] = "rbxassetid://10709798100",["lucide-citrus"] = "rbxassetid://10709798276",["lucide-clapperboard"] = "rbxassetid://10709798350",["lucide-clipboard"] = "rbxassetid://10709799288",["lucide-clipboard-check"] = "rbxassetid://10709798443",["lucide-clipboard-copy"] = "rbxassetid://10709798574",["lucide-clipboard-edit"] = "rbxassetid://10709798682",["lucide-clipboard-list"] = "rbxassetid://10709798792",["lucide-clipboard-signature"] = "rbxassetid://10709798890",["lucide-clipboard-type"] = "rbxassetid://10709798999",["lucide-clipboard-x"] = "rbxassetid://10709799124",["lucide-clock"] = "rbxassetid://10709805144",["lucide-clock-1"] = "rbxassetid://10709799535",["lucide-clock-10"] = "rbxassetid://10709799718",["lucide-clock-11"] = "rbxassetid://10709799818",["lucide-clock-12"] = "rbxassetid://10709799962",["lucide-clock-2"] = "rbxassetid://10709803876",["lucide-clock-3"] = "rbxassetid://10709803989",["lucide-clock-4"] = "rbxassetid://10709804164",["lucide-clock-5"] = "rbxassetid://10709804291",["lucide-clock-6"] = "rbxassetid://10709804435",["lucide-clock-7"] = "rbxassetid://10709804599",["lucide-clock-8"] = "rbxassetid://10709804784",["lucide-clock-9"] = "rbxassetid://10709804996",["lucide-cloud"] = "rbxassetid://10709806740",["lucide-cloud-cog"] = "rbxassetid://10709805262",["lucide-cloud-drizzle"] = "rbxassetid://10709805371",["lucide-cloud-fog"] = "rbxassetid://10709805477",["lucide-cloud-hail"] = "rbxassetid://10709805596",["lucide-cloud-lightning"] = "rbxassetid://10709805727",["lucide-cloud-moon"] = "rbxassetid://10709805942",["lucide-cloud-moon-rain"] = "rbxassetid://10709805838",["lucide-cloud-off"] = "rbxassetid://10709806060",["lucide-cloud-rain"] = "rbxassetid://10709806277",["lucide-cloud-rain-wind"] = "rbxassetid://10709806166",["lucide-cloud-snow"] = "rbxassetid://10709806374",["lucide-cloud-sun"] = "rbxassetid://10709806631",["lucide-cloud-sun-rain"] = "rbxassetid://10709806475",["lucide-cloudy"] = "rbxassetid://10709806859",["lucide-clover"] = "rbxassetid://10709806995",["lucide-code"] = "rbxassetid://10709810463",["lucide-code-2"] = "rbxassetid://10709807111",["lucide-codepen"] = "rbxassetid://10709810534",["lucide-codesandbox"] = "rbxassetid://10709810676",["lucide-coffee"] = "rbxassetid://10709810814",["lucide-cog"] = "rbxassetid://10709810948",["lucide-coins"] = "rbxassetid://10709811110",["lucide-columns"] = "rbxassetid://10709811261",["lucide-command"] = "rbxassetid://10709811365",["lucide-compass"] = "rbxassetid://10709811445",["lucide-component"] = "rbxassetid://10709811595",["lucide-concierge-bell"] = "rbxassetid://10709811706",["lucide-connection"] = "rbxassetid://10747361219",["lucide-contact"] = "rbxassetid://10709811834",["lucide-contrast"] = "rbxassetid://10709811939",["lucide-cookie"] = "rbxassetid://10709812067",["lucide-copy"] = "rbxassetid://10709812159",["lucide-copyleft"] = "rbxassetid://10709812251",["lucide-copyright"] = "rbxassetid://10709812311",["lucide-corner-down-left"] = "rbxassetid://10709812396",["lucide-corner-down-right"] = "rbxassetid://10709812485",["lucide-corner-left-down"] = "rbxassetid://10709812632",["lucide-corner-left-up"] = "rbxassetid://10709812784",["lucide-corner-right-down"] = "rbxassetid://10709812939",["lucide-corner-right-up"] = "rbxassetid://10709813094",["lucide-corner-up-left"] = "rbxassetid://10709813185",["lucide-corner-up-right"] = "rbxassetid://10709813281",["lucide-cpu"] = "rbxassetid://10709813383",["lucide-croissant"] = "rbxassetid://10709818125",["lucide-crop"] = "rbxassetid://10709818245",["lucide-cross"] = "rbxassetid://10709818399",["lucide-crosshair"] = "rbxassetid://10709818534",["lucide-crown"] = "rbxassetid://10709818626",["lucide-cup-soda"] = "rbxassetid://10709818763",["lucide-curly-braces"] = "rbxassetid://10709818847",["lucide-currency"] = "rbxassetid://10709818931",["lucide-container"] = "rbxassetid://17466205552",["lucide-database"] = "rbxassetid://10709818996",["lucide-delete"] = "rbxassetid://10709819059",["lucide-diamond"] = "rbxassetid://10709819149",["lucide-dice-1"] = "rbxassetid://10709819266",["lucide-dice-2"] = "rbxassetid://10709819361",["lucide-dice-3"] = "rbxassetid://10709819508",["lucide-dice-4"] = "rbxassetid://10709819670",["lucide-dice-5"] = "rbxassetid://10709819801",["lucide-dice-6"] = "rbxassetid://10709819896",["lucide-dices"] = "rbxassetid://10723343321",["lucide-diff"] = "rbxassetid://10723343416",["lucide-disc"] = "rbxassetid://10723343537",["lucide-divide"] = "rbxassetid://10723343805",["lucide-divide-circle"] = "rbxassetid://10723343636",["lucide-divide-square"] = "rbxassetid://10723343737",["lucide-dollar-sign"] = "rbxassetid://10723343958",["lucide-download"] = "rbxassetid://10723344270",["lucide-download-cloud"] = "rbxassetid://10723344088",["lucide-droplet"] = "rbxassetid://10723344432",["lucide-droplets"] = "rbxassetid://10734883356",["lucide-drumstick"] = "rbxassetid://10723344737",["lucide-edit"] = "rbxassetid://10734883598",["lucide-edit-2"] = "rbxassetid://10723344885",["lucide-edit-3"] = "rbxassetid://10723345088",["lucide-egg"] = "rbxassetid://10723345518",["lucide-egg-fried"] = "rbxassetid://10723345347",["lucide-electricity"] = "rbxassetid://10723345749",["lucide-electricity-off"] = "rbxassetid://10723345643",["lucide-equal"] = "rbxassetid://10723345990",["lucide-equal-not"] = "rbxassetid://10723345866",["lucide-eraser"] = "rbxassetid://10723346158",["lucide-euro"] = "rbxassetid://10723346372",["lucide-expand"] = "rbxassetid://10723346553",["lucide-external-link"] = "rbxassetid://10723346684",["lucide-eye"] = "rbxassetid://10723346959",["lucide-eye-off"] = "rbxassetid://10723346871",["lucide-factory"] = "rbxassetid://10723347051",["lucide-fan"] = "rbxassetid://10723354359",["lucide-fast-forward"] = "rbxassetid://10723354521",["lucide-feather"] = "rbxassetid://10723354671",["lucide-figma"] = "rbxassetid://10723354801",["lucide-file"] = "rbxassetid://10723374641",["lucide-file-archive"] = "rbxassetid://10723354921",["lucide-file-audio"] = "rbxassetid://10723355148",["lucide-file-audio-2"] = "rbxassetid://10723355026",["lucide-file-axis-3d"] = "rbxassetid://10723355272",["lucide-file-badge"] = "rbxassetid://10723355622",["lucide-file-badge-2"] = "rbxassetid://10723355451",["lucide-file-bar-chart"] = "rbxassetid://10723355887",["lucide-file-bar-chart-2"] = "rbxassetid://10723355746",["lucide-file-box"] = "rbxassetid://10723355989",["lucide-file-check"] = "rbxassetid://10723356210",["lucide-file-check-2"] = "rbxassetid://10723356100",["lucide-file-clock"] = "rbxassetid://10723356329",["lucide-file-code"] = "rbxassetid://10723356507",["lucide-file-cog"] = "rbxassetid://10723356830",["lucide-file-cog-2"] = "rbxassetid://10723356676",["lucide-file-diff"] = "rbxassetid://10723357039",["lucide-file-digit"] = "rbxassetid://10723357151",["lucide-file-down"] = "rbxassetid://10723357322",["lucide-file-edit"] = "rbxassetid://10723357495",["lucide-file-heart"] = "rbxassetid://10723357637",["lucide-file-image"] = "rbxassetid://10723357790",["lucide-file-input"] = "rbxassetid://10723357933",["lucide-file-json"] = "rbxassetid://10723364435",["lucide-file-json-2"] = "rbxassetid://10723364361",["lucide-file-key"] = "rbxassetid://10723364605",["lucide-file-key-2"] = "rbxassetid://10723364515",["lucide-file-line-chart"] = "rbxassetid://10723364725",["lucide-file-lock"] = "rbxassetid://10723364957",["lucide-file-lock-2"] = "rbxassetid://10723364861",["lucide-file-minus"] = "rbxassetid://10723365254",["lucide-file-minus-2"] = "rbxassetid://10723365086",["lucide-file-output"] = "rbxassetid://10723365457",["lucide-file-pie-chart"] = "rbxassetid://10723365598",["lucide-file-plus"] = "rbxassetid://10723365877",["lucide-file-plus-2"] = "rbxassetid://10723365766",["lucide-file-question"] = "rbxassetid://10723365987",["lucide-file-scan"] = "rbxassetid://10723366167",["lucide-file-search"] = "rbxassetid://10723366550",["lucide-file-search-2"] = "rbxassetid://10723366340",["lucide-file-signature"] = "rbxassetid://10723366741",["lucide-file-spreadsheet"] = "rbxassetid://10723366962",["lucide-file-symlink"] = "rbxassetid://10723367098",["lucide-file-terminal"] = "rbxassetid://10723367244",["lucide-file-text"] = "rbxassetid://10723367380",["lucide-file-type"] = "rbxassetid://10723367606",["lucide-file-type-2"] = "rbxassetid://10723367509",["lucide-file-up"] = "rbxassetid://10723367734",["lucide-file-video"] = "rbxassetid://10723373884",["lucide-file-video-2"] = "rbxassetid://10723367834",["lucide-file-volume"] = "rbxassetid://10723374172",["lucide-file-volume-2"] = "rbxassetid://10723374030",["lucide-file-warning"] = "rbxassetid://10723374276",["lucide-file-x"] = "rbxassetid://10723374544",["lucide-file-x-2"] = "rbxassetid://10723374378",["lucide-files"] = "rbxassetid://10723374759",["lucide-film"] = "rbxassetid://10723374981",["lucide-filter"] = "rbxassetid://10723375128",["lucide-fingerprint"] = "rbxassetid://10723375250",["lucide-flag"] = "rbxassetid://10723375890",["lucide-flag-off"] = "rbxassetid://10723375443",["lucide-flag-triangle-left"] = "rbxassetid://10723375608",["lucide-flag-triangle-right"] = "rbxassetid://10723375727",["lucide-flame"] = "rbxassetid://10723376114",["lucide-flashlight"] = "rbxassetid://10723376471",["lucide-flashlight-off"] = "rbxassetid://10723376365",["lucide-flask-conical"] = "rbxassetid://10734883986",["lucide-flask-round"] = "rbxassetid://10723376614",["lucide-flip-horizontal"] = "rbxassetid://10723376884",["lucide-flip-horizontal-2"] = "rbxassetid://10723376745",["lucide-flip-vertical"] = "rbxassetid://10723377138",["lucide-flip-vertical-2"] = "rbxassetid://10723377026",["lucide-flower"] = "rbxassetid://10747830374",["lucide-flower-2"] = "rbxassetid://10723377305",["lucide-focus"] = "rbxassetid://10723377537",["lucide-folder"] = "rbxassetid://10723387563",["lucide-folder-archive"] = "rbxassetid://10723384478",["lucide-folder-check"] = "rbxassetid://10723384605",["lucide-folder-clock"] = "rbxassetid://10723384731",["lucide-folder-closed"] = "rbxassetid://10723384893",["lucide-folder-cog"] = "rbxassetid://10723385213",["lucide-folder-cog-2"] = "rbxassetid://10723385036",["lucide-folder-down"] = "rbxassetid://10723385338",["lucide-folder-edit"] = "rbxassetid://10723385445",["lucide-folder-heart"] = "rbxassetid://10723385545",["lucide-folder-input"] = "rbxassetid://10723385721",["lucide-folder-key"] = "rbxassetid://10723385848",["lucide-folder-lock"] = "rbxassetid://10723386005",["lucide-folder-minus"] = "rbxassetid://10723386127",["lucide-folder-open"] = "rbxassetid://10723386277",["lucide-folder-output"] = "rbxassetid://10723386386",["lucide-folder-plus"] = "rbxassetid://10723386531",["lucide-folder-search"] = "rbxassetid://10723386787",["lucide-folder-search-2"] = "rbxassetid://10723386674",["lucide-folder-symlink"] = "rbxassetid://10723386930",["lucide-folder-tree"] = "rbxassetid://10723387085",["lucide-folder-up"] = "rbxassetid://10723387265",["lucide-folder-x"] = "rbxassetid://10723387448",["lucide-folders"] = "rbxassetid://10723387721",["lucide-form-input"] = "rbxassetid://10723387841",["lucide-forward"] = "rbxassetid://10723388016",["lucide-frame"] = "rbxassetid://10723394389",["lucide-framer"] = "rbxassetid://10723394565",["lucide-frown"] = "rbxassetid://10723394681",["lucide-fuel"] = "rbxassetid://10723394846",["lucide-function-square"] = "rbxassetid://10723395041",["lucide-gamepad"] = "rbxassetid://10723395457",["lucide-gamepad-2"] = "rbxassetid://10723395215",["lucide-gauge"] = "rbxassetid://10723395708",["lucide-gavel"] = "rbxassetid://10723395896",["lucide-gem"] = "rbxassetid://10723396000",["lucide-ghost"] = "rbxassetid://10723396107",["lucide-gift"] = "rbxassetid://10723396402",["lucide-gift-card"] = "rbxassetid://10723396225",["lucide-git-branch"] = "rbxassetid://10723396676",["lucide-git-branch-plus"] = "rbxassetid://10723396542",["lucide-git-commit"] = "rbxassetid://10723396812",["lucide-git-compare"] = "rbxassetid://10723396954",["lucide-git-fork"] = "rbxassetid://10723397049",["lucide-git-merge"] = "rbxassetid://10723397165",["lucide-git-pull-request"] = "rbxassetid://10723397431",["lucide-git-pull-request-closed"] = "rbxassetid://10723397268",["lucide-git-pull-request-draft"] = "rbxassetid://10734884302",["lucide-glass"] = "rbxassetid://10723397788",["lucide-glass-2"] = "rbxassetid://10723397529",["lucide-glass-water"] = "rbxassetid://10723397678",["lucide-glasses"] = "rbxassetid://10723397895",["lucide-globe"] = "rbxassetid://10723404337",["lucide-globe-2"] = "rbxassetid://10723398002",["lucide-grab"] = "rbxassetid://10723404472",["lucide-graduation-cap"] = "rbxassetid://10723404691",["lucide-grape"] = "rbxassetid://10723404822",["lucide-grid"] = "rbxassetid://10723404936",["lucide-grip-horizontal"] = "rbxassetid://10723405089",["lucide-grip-vertical"] = "rbxassetid://10723405236",["lucide-hammer"] = "rbxassetid://10723405360",["lucide-hand"] = "rbxassetid://10723405649",["lucide-hand-metal"] = "rbxassetid://10723405508",["lucide-hard-drive"] = "rbxassetid://10723405749",["lucide-hard-hat"] = "rbxassetid://10723405859",["lucide-hash"] = "rbxassetid://10723405975",["lucide-haze"] = "rbxassetid://10723406078",["lucide-headphones"] = "rbxassetid://10723406165",["lucide-heart"] = "rbxassetid://10723406885",["lucide-heart-crack"] = "rbxassetid://10723406299",["lucide-heart-handshake"] = "rbxassetid://10723406480",["lucide-heart-off"] = "rbxassetid://10723406662",["lucide-heart-pulse"] = "rbxassetid://10723406795",["lucide-help-circle"] = "rbxassetid://10723406988",["lucide-hexagon"] = "rbxassetid://10723407092",["lucide-highlighter"] = "rbxassetid://10723407192",["lucide-history"] = "rbxassetid://10723407335",["lucide-home"] = "rbxassetid://10723407389",["lucide-hourglass"] = "rbxassetid://10723407498",["lucide-ice-cream"] = "rbxassetid://10723414308",["lucide-image"] = "rbxassetid://10723415040",["lucide-image-minus"] = "rbxassetid://10723414487",["lucide-image-off"] = "rbxassetid://10723414677",["lucide-image-plus"] = "rbxassetid://10723414827",["lucide-import"] = "rbxassetid://10723415205",["lucide-inbox"] = "rbxassetid://10723415335",["lucide-indent"] = "rbxassetid://10723415494",["lucide-indian-rupee"] = "rbxassetid://10723415642",["lucide-infinity"] = "rbxassetid://10723415766",["lucide-info"] = "rbxassetid://10723415903",["lucide-inspect"] = "rbxassetid://10723416057",["lucide-italic"] = "rbxassetid://10723416195",["lucide-japanese-yen"] = "rbxassetid://10723416363",["lucide-joystick"] = "rbxassetid://10723416527",["lucide-key"] = "rbxassetid://10723416652",["lucide-keyboard"] = "rbxassetid://10723416765",["lucide-lamp"] = "rbxassetid://10723417513",["lucide-lamp-ceiling"] = "rbxassetid://10723416922",["lucide-lamp-desk"] = "rbxassetid://10723417016",["lucide-lamp-floor"] = "rbxassetid://10723417131",["lucide-lamp-wall-down"] = "rbxassetid://10723417240",["lucide-lamp-wall-up"] = "rbxassetid://10723417356",["lucide-landmark"] = "rbxassetid://10723417608",["lucide-languages"] = "rbxassetid://10723417703",["lucide-laptop"] = "rbxassetid://10723423881",["lucide-laptop-2"] = "rbxassetid://10723417797",["lucide-lasso"] = "rbxassetid://10723424235",["lucide-lasso-select"] = "rbxassetid://10723424058",["lucide-laugh"] = "rbxassetid://10723424372",["lucide-layers"] = "rbxassetid://10723424505",["lucide-layout"] = "rbxassetid://10723425376",["lucide-layout-dashboard"] = "rbxassetid://10723424646",["lucide-layout-grid"] = "rbxassetid://10723424838",["lucide-layout-list"] = "rbxassetid://10723424963",["lucide-layout-template"] = "rbxassetid://10723425187",["lucide-leaf"] = "rbxassetid://10723425539",["lucide-library"] = "rbxassetid://10723425615",["lucide-life-buoy"] = "rbxassetid://10723425685",["lucide-lightbulb"] = "rbxassetid://10723425852",["lucide-lightbulb-off"] = "rbxassetid://10723425762",["lucide-line-chart"] = "rbxassetid://10723426393",["lucide-link"] = "rbxassetid://10723426722",["lucide-link-2"] = "rbxassetid://10723426595",["lucide-link-2-off"] = "rbxassetid://10723426513",["lucide-list"] = "rbxassetid://10723433811",["lucide-list-checks"] = "rbxassetid://10734884548",["lucide-list-end"] = "rbxassetid://10723426886",["lucide-list-minus"] = "rbxassetid://10723426986",["lucide-list-music"] = "rbxassetid://10723427081",["lucide-list-ordered"] = "rbxassetid://10723427199",["lucide-list-plus"] = "rbxassetid://10723427334",["lucide-list-start"] = "rbxassetid://10723427494",["lucide-list-video"] = "rbxassetid://10723427619",["lucide-list-todo"] = "rbxassetid://17376008003",["lucide-list-x"] = "rbxassetid://10723433655",["lucide-loader"] = "rbxassetid://10723434070",["lucide-loader-2"] = "rbxassetid://10723433935",["lucide-locate"] = "rbxassetid://10723434557",["lucide-locate-fixed"] = "rbxassetid://10723434236",["lucide-locate-off"] = "rbxassetid://10723434379",["lucide-lock"] = "rbxassetid://10723434711",["lucide-log-in"] = "rbxassetid://10723434830",["lucide-log-out"] = "rbxassetid://10723434906",["lucide-luggage"] = "rbxassetid://10723434993",["lucide-magnet"] = "rbxassetid://10723435069",["lucide-mail"] = "rbxassetid://10734885430",["lucide-mail-check"] = "rbxassetid://10723435182",["lucide-mail-minus"] = "rbxassetid://10723435261",["lucide-mail-open"] = "rbxassetid://10723435342",["lucide-mail-plus"] = "rbxassetid://10723435443",["lucide-mail-question"] = "rbxassetid://10723435515",["lucide-mail-search"] = "rbxassetid://10734884739",["lucide-mail-warning"] = "rbxassetid://10734885015",["lucide-mail-x"] = "rbxassetid://10734885247",["lucide-mails"] = "rbxassetid://10734885614",["lucide-map"] = "rbxassetid://10734886202",["lucide-map-pin"] = "rbxassetid://10734886004",["lucide-map-pin-off"] = "rbxassetid://10734885803",["lucide-maximize"] = "rbxassetid://10734886735",["lucide-maximize-2"] = "rbxassetid://10734886496",["lucide-medal"] = "rbxassetid://10734887072",["lucide-megaphone"] = "rbxassetid://10734887454",["lucide-megaphone-off"] = "rbxassetid://10734887311",["lucide-meh"] = "rbxassetid://10734887603",["lucide-menu"] = "rbxassetid://10734887784",["lucide-message-circle"] = "rbxassetid://10734888000",["lucide-message-square"] = "rbxassetid://10734888228",["lucide-mic"] = "rbxassetid://10734888864",["lucide-mic-2"] = "rbxassetid://10734888430",["lucide-mic-off"] = "rbxassetid://10734888646",["lucide-microscope"] = "rbxassetid://10734889106",["lucide-microwave"] = "rbxassetid://10734895076",["lucide-milestone"] = "rbxassetid://10734895310",["lucide-minimize"] = "rbxassetid://10734895698",["lucide-minimize-2"] = "rbxassetid://10734895530",["lucide-minus"] = "rbxassetid://10734896206",["lucide-minus-circle"] = "rbxassetid://10734895856",["lucide-minus-square"] = "rbxassetid://10734896029",["lucide-monitor"] = "rbxassetid://10734896881",["lucide-monitor-off"] = "rbxassetid://10734896360",["lucide-monitor-speaker"] = "rbxassetid://10734896512",["lucide-moon"] = "rbxassetid://10734897102",["lucide-more-horizontal"] = "rbxassetid://10734897250",["lucide-more-vertical"] = "rbxassetid://10734897387",["lucide-mountain"] = "rbxassetid://10734897956",["lucide-mountain-snow"] = "rbxassetid://10734897665",["lucide-mouse"] = "rbxassetid://10734898592",["lucide-mouse-pointer"] = "rbxassetid://10734898476",["lucide-mouse-pointer-2"] = "rbxassetid://10734898194",["lucide-mouse-pointer-click"] = "rbxassetid://10734898355",["lucide-move"] = "rbxassetid://10734900011",["lucide-move-3d"] = "rbxassetid://10734898756",["lucide-move-diagonal"] = "rbxassetid://10734899164",["lucide-move-diagonal-2"] = "rbxassetid://10734898934",["lucide-move-horizontal"] = "rbxassetid://10734899414",["lucide-move-vertical"] = "rbxassetid://10734899821",["lucide-music"] = "rbxassetid://10734905958",["lucide-music-2"] = "rbxassetid://10734900215",["lucide-music-3"] = "rbxassetid://10734905665",["lucide-music-4"] = "rbxassetid://10734905823",["lucide-navigation"] = "rbxassetid://10734906744",["lucide-navigation-2"] = "rbxassetid://10734906332",["lucide-navigation-2-off"] = "rbxassetid://10734906144",["lucide-navigation-off"] = "rbxassetid://10734906580",["lucide-network"] = "rbxassetid://10734906975",["lucide-newspaper"] = "rbxassetid://10734907168",["lucide-octagon"] = "rbxassetid://10734907361",["lucide-option"] = "rbxassetid://10734907649",["lucide-outdent"] = "rbxassetid://10734907933",["lucide-package"] = "rbxassetid://10734909540",["lucide-package-2"] = "rbxassetid://10734908151",["lucide-package-check"] = "rbxassetid://10734908384",["lucide-package-minus"] = "rbxassetid://10734908626",["lucide-package-open"] = "rbxassetid://10734908793",["lucide-package-plus"] = "rbxassetid://10734909016",["lucide-package-search"] = "rbxassetid://10734909196",["lucide-package-x"] = "rbxassetid://10734909375",["lucide-paint-bucket"] = "rbxassetid://10734909847",["lucide-paintbrush"] = "rbxassetid://10734910187",["lucide-paintbrush-2"] = "rbxassetid://10734910030",["lucide-palette"] = "rbxassetid://10734910430",["lucide-palmtree"] = "rbxassetid://10734910680",["lucide-paperclip"] = "rbxassetid://10734910927",["lucide-party-popper"] = "rbxassetid://10734918735",["lucide-pause"] = "rbxassetid://10734919336",["lucide-pause-circle"] = "rbxassetid://10735024209",["lucide-pause-octagon"] = "rbxassetid://10734919143",["lucide-pen-tool"] = "rbxassetid://10734919503",["lucide-pencil"] = "rbxassetid://10734919691",["lucide-percent"] = "rbxassetid://10734919919",["lucide-person-standing"] = "rbxassetid://10734920149",["lucide-phone"] = "rbxassetid://10734921524",["lucide-phone-call"] = "rbxassetid://10734920305",["lucide-phone-forwarded"] = "rbxassetid://10734920508",["lucide-phone-incoming"] = "rbxassetid://10734920694",["lucide-phone-missed"] = "rbxassetid://10734920845",["lucide-phone-off"] = "rbxassetid://10734921077",["lucide-phone-outgoing"] = "rbxassetid://10734921288",["lucide-pie-chart"] = "rbxassetid://10734921727",["lucide-piggy-bank"] = "rbxassetid://10734921935",["lucide-pin"] = "rbxassetid://10734922324",["lucide-pin-off"] = "rbxassetid://10734922180",["lucide-pipette"] = "rbxassetid://10734922497",["lucide-pizza"] = "rbxassetid://10734922774",["lucide-plane"] = "rbxassetid://10734922971",["lucide-plane-landing"] = "rbxassetid://17376029914",["lucide-play"] = "rbxassetid://10734923549",["lucide-play-circle"] = "rbxassetid://10734923214",["lucide-plus"] = "rbxassetid://10734924532",["lucide-plus-circle"] = "rbxassetid://10734923868",["lucide-plus-square"] = "rbxassetid://10734924219",["lucide-podcast"] = "rbxassetid://10734929553",["lucide-pointer"] = "rbxassetid://10734929723",["lucide-pound-sterling"] = "rbxassetid://10734929981",["lucide-power"] = "rbxassetid://10734930466",["lucide-power-off"] = "rbxassetid://10734930257",["lucide-printer"] = "rbxassetid://10734930632",["lucide-puzzle"] = "rbxassetid://10734930886",["lucide-quote"] = "rbxassetid://10734931234",["lucide-radio"] = "rbxassetid://10734931596",["lucide-radio-receiver"] = "rbxassetid://10734931402",["lucide-rectangle-horizontal"] = "rbxassetid://10734931777",["lucide-rectangle-vertical"] = "rbxassetid://10734932081",["lucide-recycle"] = "rbxassetid://10734932295",["lucide-redo"] = "rbxassetid://10734932822",["lucide-redo-2"] = "rbxassetid://10734932586",["lucide-refresh-ccw"] = "rbxassetid://10734933056",["lucide-refresh-cw"] = "rbxassetid://10734933222",["lucide-refrigerator"] = "rbxassetid://10734933465",["lucide-regex"] = "rbxassetid://10734933655",["lucide-repeat"] = "rbxassetid://10734933966",["lucide-repeat-1"] = "rbxassetid://10734933826",["lucide-reply"] = "rbxassetid://10734934252",["lucide-reply-all"] = "rbxassetid://10734934132",["lucide-rewind"] = "rbxassetid://10734934347",["lucide-rocket"] = "rbxassetid://10734934585",["lucide-rocking-chair"] = "rbxassetid://10734939942",["lucide-rotate-3d"] = "rbxassetid://10734940107",["lucide-rotate-ccw"] = "rbxassetid://10734940376",["lucide-rotate-cw"] = "rbxassetid://10734940654",["lucide-rss"] = "rbxassetid://10734940825",["lucide-ruler"] = "rbxassetid://10734941018",["lucide-russian-ruble"] = "rbxassetid://10734941199",["lucide-sailboat"] = "rbxassetid://10734941354",["lucide-save"] = "rbxassetid://10734941499",["lucide-scale"] = "rbxassetid://10734941912",["lucide-scale-3d"] = "rbxassetid://10734941739",["lucide-scaling"] = "rbxassetid://10734942072",["lucide-scan"] = "rbxassetid://10734942565",["lucide-scan-face"] = "rbxassetid://10734942198",["lucide-scan-line"] = "rbxassetid://10734942351",["lucide-scissors"] = "rbxassetid://10734942778",["lucide-screen-share"] = "rbxassetid://10734943193",["lucide-screen-share-off"] = "rbxassetid://10734942967",["lucide-scroll"] = "rbxassetid://10734943448",["lucide-search"] = "rbxassetid://10734943674",["lucide-send"] = "rbxassetid://10734943902",["lucide-separator-horizontal"] = "rbxassetid://10734944115",["lucide-separator-vertical"] = "rbxassetid://10734944326",["lucide-server"] = "rbxassetid://10734949856",["lucide-server-cog"] = "rbxassetid://10734944444",["lucide-server-crash"] = "rbxassetid://10734944554",["lucide-server-off"] = "rbxassetid://10734944668",["lucide-settings"] = "rbxassetid://10734950309",["lucide-settings-2"] = "rbxassetid://10734950020",["lucide-share"] = "rbxassetid://10734950813",["lucide-share-2"] = "rbxassetid://10734950553",["lucide-sheet"] = "rbxassetid://10734951038",["lucide-shield"] = "rbxassetid://10734951847",["lucide-shield-alert"] = "rbxassetid://10734951173",["lucide-shield-check"] = "rbxassetid://10734951367",["lucide-shield-close"] = "rbxassetid://10734951535",["lucide-shield-off"] = "rbxassetid://10734951684",["lucide-shirt"] = "rbxassetid://10734952036",["lucide-shopping-bag"] = "rbxassetid://10734952273",["lucide-shopping-cart"] = "rbxassetid://10734952479",["lucide-shovel"] = "rbxassetid://10734952773",["lucide-shower-head"] = "rbxassetid://10734952942",["lucide-shrink"] = "rbxassetid://10734953073",["lucide-shrub"] = "rbxassetid://10734953241",["lucide-shuffle"] = "rbxassetid://10734953451",["lucide-sidebar"] = "rbxassetid://10734954301",["lucide-sidebar-close"] = "rbxassetid://10734953715",["lucide-sidebar-open"] = "rbxassetid://10734954000",["lucide-sigma"] = "rbxassetid://10734954538",["lucide-signal"] = "rbxassetid://10734961133",["lucide-signal-high"] = "rbxassetid://10734954807",["lucide-signal-low"] = "rbxassetid://10734955080",["lucide-signal-medium"] = "rbxassetid://10734955336",["lucide-signal-zero"] = "rbxassetid://10734960878",["lucide-siren"] = "rbxassetid://10734961284",["lucide-skip-back"] = "rbxassetid://10734961526",["lucide-skip-forward"] = "rbxassetid://10734961809",["lucide-skull"] = "rbxassetid://10734962068",["lucide-slack"] = "rbxassetid://10734962339",["lucide-slash"] = "rbxassetid://10734962600",["lucide-slice"] = "rbxassetid://10734963024",["lucide-sliders"] = "rbxassetid://10734963400",["lucide-sliders-horizontal"] = "rbxassetid://10734963191",["lucide-smartphone"] = "rbxassetid://10734963940",["lucide-smartphone-charging"] = "rbxassetid://10734963671",["lucide-smile"] = "rbxassetid://10734964441",["lucide-smile-plus"] = "rbxassetid://10734964188",["lucide-snowflake"] = "rbxassetid://10734964600",["lucide-sofa"] = "rbxassetid://10734964852",["lucide-sort-asc"] = "rbxassetid://10734965115",["lucide-sort-desc"] = "rbxassetid://10734965287",["lucide-speaker"] = "rbxassetid://10734965419",["lucide-sprout"] = "rbxassetid://10734965572",["lucide-square"] = "rbxassetid://10734965702",["lucide-star"] = "rbxassetid://10734966248",["lucide-star-half"] = "rbxassetid://10734965897",["lucide-star-off"] = "rbxassetid://10734966097",["lucide-stethoscope"] = "rbxassetid://10734966384",["lucide-sticker"] = "rbxassetid://10734972234",["lucide-sticky-note"] = "rbxassetid://10734972463",["lucide-stop-circle"] = "rbxassetid://10734972621",["lucide-stretch-horizontal"] = "rbxassetid://10734972862",["lucide-stretch-vertical"] = "rbxassetid://10734973130",["lucide-strikethrough"] = "rbxassetid://10734973290",["lucide-subscript"] = "rbxassetid://10734973457",["lucide-sun"] = "rbxassetid://10734974297",["lucide-sun-dim"] = "rbxassetid://10734973645",["lucide-sun-medium"] = "rbxassetid://10734973778",["lucide-sun-moon"] = "rbxassetid://10734973999",["lucide-sun-snow"] = "rbxassetid://10734974130",["lucide-sunrise"] = "rbxassetid://10734974522",["lucide-sunset"] = "rbxassetid://10734974689",["lucide-superscript"] = "rbxassetid://10734974850",["lucide-swiss-franc"] = "rbxassetid://10734975024",["lucide-switch-camera"] = "rbxassetid://10734975214",["lucide-sword"] = "rbxassetid://10734975486",["lucide-swords"] = "rbxassetid://10734975692",["lucide-syringe"] = "rbxassetid://10734975932",["lucide-table"] = "rbxassetid://10734976230",["lucide-table-2"] = "rbxassetid://10734976097",["lucide-tablet"] = "rbxassetid://10734976394",["lucide-tag"] = "rbxassetid://10734976528",["lucide-tags"] = "rbxassetid://10734976739",["lucide-target"] = "rbxassetid://10734977012",["lucide-tent"] = "rbxassetid://10734981750",["lucide-terminal"] = "rbxassetid://10734982144",["lucide-terminal-square"] = "rbxassetid://10734981995",["lucide-text-cursor"] = "rbxassetid://10734982395",["lucide-text-cursor-input"] = "rbxassetid://10734982297",["lucide-thermometer"] = "rbxassetid://10734983134",["lucide-thermometer-snowflake"] = "rbxassetid://10734982571",["lucide-thermometer-sun"] = "rbxassetid://10734982771",["lucide-thumbs-down"] = "rbxassetid://10734983359",["lucide-thumbs-up"] = "rbxassetid://10734983629",["lucide-ticket"] = "rbxassetid://10734983868",["lucide-timer"] = "rbxassetid://10734984606",["lucide-timer-off"] = "rbxassetid://10734984138",["lucide-timer-reset"] = "rbxassetid://10734984355",["lucide-toggle-left"] = "rbxassetid://10734984834",["lucide-toggle-right"] = "rbxassetid://10734985040",["lucide-tornado"] = "rbxassetid://10734985247",["lucide-toy-brick"] = "rbxassetid://10747361919",["lucide-train"] = "rbxassetid://10747362105",["lucide-trash"] = "rbxassetid://10747362393",["lucide-trash-2"] = "rbxassetid://10747362241",["lucide-tree-deciduous"] = "rbxassetid://10747362534",["lucide-tree-pine"] = "rbxassetid://10747362748",["lucide-trees"] = "rbxassetid://10747363016",["lucide-trending-down"] = "rbxassetid://10747363205",["lucide-trending-up"] = "rbxassetid://10747363465",["lucide-triangle"] = "rbxassetid://10747363621",["lucide-trophy"] = "rbxassetid://10747363809",["lucide-truck"] = "rbxassetid://10747364031",["lucide-tv"] = "rbxassetid://10747364593",["lucide-tv-2"] = "rbxassetid://10747364302",["lucide-type"] = "rbxassetid://10747364761",["lucide-umbrella"] = "rbxassetid://10747364971",["lucide-underline"] = "rbxassetid://10747365191",["lucide-undo"] = "rbxassetid://10747365484",["lucide-undo-2"] = "rbxassetid://10747365359",["lucide-unlink"] = "rbxassetid://10747365771",["lucide-unlink-2"] = "rbxassetid://10747397871",["lucide-unlock"] = "rbxassetid://10747366027",["lucide-upload"] = "rbxassetid://10747366434",["lucide-upload-cloud"] = "rbxassetid://10747366266",["lucide-usb"] = "rbxassetid://10747366606",["lucide-user"] = "rbxassetid://10747373176",["lucide-user-check"] = "rbxassetid://10747371901",["lucide-user-cog"] = "rbxassetid://10747372167",["lucide-user-minus"] = "rbxassetid://10747372346",["lucide-user-plus"] = "rbxassetid://10747372702",["lucide-user-x"] = "rbxassetid://10747372992",["lucide-users"] = "rbxassetid://10747373426",["lucide-utensils"] = "rbxassetid://10747373821",["lucide-utensils-crossed"] = "rbxassetid://10747373629",["lucide-venetian-mask"] = "rbxassetid://10747374003",["lucide-verified"] = "rbxassetid://10747374131",["lucide-vibrate"] = "rbxassetid://10747374489",["lucide-vibrate-off"] = "rbxassetid://10747374269",["lucide-video"] = "rbxassetid://10747374938",["lucide-video-off"] = "rbxassetid://10747374721",["lucide-view"] = "rbxassetid://10747375132",["lucide-voicemail"] = "rbxassetid://10747375281",["lucide-volume"] = "rbxassetid://10747376008",["lucide-volume-1"] = "rbxassetid://10747375450",["lucide-volume-2"] = "rbxassetid://10747375679",["lucide-volume-x"] = "rbxassetid://10747375880",["lucide-wallet"] = "rbxassetid://10747376205",["lucide-wand"] = "rbxassetid://10747376565",["lucide-wand-2"] = "rbxassetid://10747376349",["lucide-watch"] = "rbxassetid://10747376722",["lucide-waves"] = "rbxassetid://10747376931",["lucide-webcam"] = "rbxassetid://10747381992",["lucide-wifi"] = "rbxassetid://10747382504",["lucide-wifi-off"] = "rbxassetid://10747382268",["lucide-wind"] = "rbxassetid://10747382750",["lucide-wrap-text"] = "rbxassetid://10747383065",["lucide-wrench"] = "rbxassetid://10747383470",["lucide-x"] = "rbxassetid://10747384394",["lucide-x-circle"] = "rbxassetid://10747383819",["lucide-x-octagon"] = "rbxassetid://10747384037",["lucide-x-square"] = "rbxassetid://10747384217",["lucide-zoom-in"] = "rbxassetid://10747384552",["lucide-zoom-out"] = "rbxassetid://10747384679",["lucide-cat"] = "rbxassetid://16935650691",["lucide-message-circle-question"] = "rbxassetid://16970049192",["lucide-webhook"] = "rbxassetid://17320556264",}function Library:GetIcon(Name)if Name ~= nil thenif string.find(Name, "rbxassetid://") thenreturn Nameendlocal AssetId = tonumber(Name)if AssetId thenreturn "rbxassetid://" .. AssetIdendif Icons["lucide-" .. Name] thenreturn Icons["lucide-" .. Name]endendreturn nilendlocal Elements ={}Elements.__index = ElementsElements.__namecall = function(Table, Key, ...)return Elements[Key](...)endfor _, ElementComponent in pairs(ElementsTable) doElements["Add" .. ElementComponent.__type] = function(self, Idx, Config)ElementComponent.Container = self.ContainerElementComponent.Type = self.TypeElementComponent.ScrollFrame = self.ScrollFrameElementComponent.Library = Libraryreturn ElementComponent:New(Idx, Config)endendLibrary.Elements = Elementsif RunService:IsStudio() thenmakefolder = function(...) return ... end;makefile = function(...) return ... end;isfile = function(...) return ... end;isfolder = function(...) return ... end;readfile = function(...) return ... end;writefile = function(...) return ... end;listfiles = function (...) return{...}end;endlocal SaveManager ={}doSaveManager.Folder = "FluentSettings"SaveManager.Ignore ={}SaveManager.Parser ={Toggle ={Save = function(idx, object) return{type = "Toggle", idx = idx, value = object.Value}end,Load = function(idx, data)if SaveManager.Options[idx] then SaveManager.Options[idx]:SetValue(data.value)endend,},Slider ={Save = function(idx, object)return{type = "Slider", idx = idx, value = tostring(object.Value)}end,Load = function(idx, data)if SaveManager.Options[idx] then SaveManager.Options[idx]:SetValue(data.value)endend,},Dropdown ={Save = function(idx, object)return{type = "Dropdown", idx = idx, value = object.Value, mutli = object.Multi}end,Load = function(idx, data)if SaveManager.Options[idx] then SaveManager.Options[idx]:SetValue(data.value)endend,},Colorpicker ={Save = function(idx, object)return{type = "Colorpicker", idx = idx, value = object.Value:ToHex(), transparency = object.Transparency}end,Load = function(idx, data)if SaveManager.Options[idx] then SaveManager.Options[idx]:SetValueRGB(Color3.fromHex(data.value), data.transparency)endend,},Keybind ={Save = function(idx, object)return{type = "Keybind", idx = idx, mode = object.Mode, key = object.Value}end,Load = function(idx, data)if SaveManager.Options[idx] then SaveManager.Options[idx]:SetValue(data.key, data.mode)endend,},Input ={Save = function(idx, object)return{type = "Input", idx = idx, text = object.Value}end,Load = function(idx, data)if SaveManager.Options[idx] and type(data.text) == "string" thenSaveManager.Options[idx]:SetValue(data.text)endend,},}function SaveManager:SetIgnoreIndexes(list)for _, key in next, list doself.Ignore[key] = trueendendfunction SaveManager:SetFolder(folder)self.Folder = folder;self:BuildFolderTree()endfunction SaveManager:Save(Name)if (not Name) thenreturn false, "no config file is selected"endlocal fullPath = Namelocal data ={objects ={}}for idx, option in next, SaveManager.Options doif not self.Parser[option.Type] then continue endif self.Ignore[idx] then continue endtable.insert(data.objects, self.Parser[option.Type].Save(idx, option))endlocal success, encoded = pcall(httpService.JSONEncode, httpService, data)if not success thenreturn false, "failed to encode data"endwritefile(fullPath, encoded)return trueendfunction SaveManager:Load(name)if (not name) thenreturn false, "no config file is selected"endlocal file = nameif not isfile(file) then return false, "Create Config Save File" endlocal success, decoded = pcall(httpService.JSONDecode, httpService, readfile(file))if not success then return false, "decode error" endfor _, option in next, decoded.objects doif self.Parser[option.type] and not self.Ignore[option.idx] thentask.spawn(function() self.Parser[option.type].Load(option.idx, option) end)endendreturn trueendfunction SaveManager:IgnoreThemeSettings()self:SetIgnoreIndexes({"InterfaceTheme", "AcrylicToggle", "TransparentToggle", "MenuKeybind"})endfunction SaveManager:BuildFolderTree()local paths ={self.Folder,self.Folder .. "/"}for i = 1, #paths dolocal str = paths[i]if not isfolder(str) thenmakefolder(str)endendendfunction SaveManager:RefreshConfigList()local list = listfiles(self.Folder .. "/")local out ={}for i = 1, #list dolocal file = list[i]if file:sub(-5) == ".json" thenlocal pos = file:find(".json", 1, true)local start = poslocal char = file:sub(pos, pos)while char ~= "/" and char ~= "\\" and char ~= "" dopos = pos - 1char = file:sub(pos, pos)endif char == "/" or char == "\\" thenlocal name = file:sub(pos + 1, start - 1)if name ~= "options" thentable.insert(out, name)endendendendreturn outendfunction SaveManager:SetLibrary(library)self.Library = libraryself.Options = library.Optionsendfunction SaveManager:LoadAutoloadConfig()if isfile(self.Folder .. "/autoload.txt") thenlocal name = readfile(self.Folder .. "/autoload.txt")local success, err = self:Load(name)if not success thenreturn self.Library:Notify({Title = "Interface",Content = "Config loader",SubContent = "Failed to load autoload config:" .. err,Duration = 7})endself.Library:Notify({Title = "Interface",Content = "Config loader",SubContent = string.format("Auto loaded config %q", name),Duration = 7})endendfunction SaveManager:BuildConfigSection(tab)assert(self.Library, "Must set SaveManager.Library")local section = tab:AddSection("Configuration")section:AddInput("SaveManager_ConfigName",{Title = "Config name"})section:AddDropdown("SaveManager_ConfigList",{Title = "Config list", Values = self:RefreshConfigList(), AllowNull = true})section:AddButton({Title = "Create config",Callback = function()local name = SaveManager.Options.SaveManager_ConfigName.Valueif name:gsub(" ", "") == "" then return self.Library:Notify({Title = "Interface",Content = "Config loader",SubContent = "Invalid config name (empty)",Duration = 7})endlocal success, err = self:Save(name)if not success thenreturn self.Library:Notify({Title = "Interface",Content = "Config loader",SubContent = "Failed to save config:" .. err,Duration = 7})endself.Library:Notify({Title = "Interface",Content = "Config loader",SubContent = string.format("Created config %q", name),Duration = 7})SaveManager.Options.SaveManager_ConfigList:SetValues(self:RefreshConfigList())SaveManager.Options.SaveManager_ConfigList:SetValue(nil)end})section:AddButton({Title = "Load config", Callback = function()local name = SaveManager.Options.SaveManager_ConfigList.Valuelocal success, err = self:Load(name)if not success thenreturn self.Library:Notify({Title = "Interface",Content = "Config loader",SubContent = "Failed to load config:" .. err,Duration = 7})endself.Library:Notify({Title = "Interface",Content = "Config loader",SubContent = string.format("Loaded config %q", name),Duration = 7})end})section:AddButton({Title = "Save config", Callback = function()local name = SaveManager.Options.SaveManager_ConfigList.Valuelocal success, err = self:Save(name)if not success thenreturn self.Library:Notify({Title = "Interface",Content = "Config loader",SubContent = "Failed to overwrite config:" .. err,Duration = 7})endself.Library:Notify({Title = "Interface",Content = "Config loader",SubContent = string.format("Overwrote config %q", name),Duration = 7})end})section:AddButton({Title = "Refresh list", Callback = function()SaveManager.Options.SaveManager_ConfigList:SetValues(self:RefreshConfigList())SaveManager.Options.SaveManager_ConfigList:SetValue(nil)end})local AutoloadButtonAutoloadButton = section:AddButton({Title = "Set as autoload", Description = "Current autoload config:none", Callback = function()local name = SaveManager.Options.SaveManager_ConfigList.Valuewritefile(self.Folder .. "/autoload.txt", name)AutoloadButton:SetDesc("Current autoload config:" .. name)self.Library:Notify({Title = "Interface",Content = "Config loader",SubContent = string.format("Set %q to auto load", name),Duration = 7})end})if isfile(self.Folder .. "/autoload.txt") thenlocal name = readfile(self.Folder .. "/autoload.txt")AutoloadButton:SetDesc("Current autoload config:" .. name)endSaveManager:SetIgnoreIndexes({"SaveManager_ConfigList", "SaveManager_ConfigName"})end-- SaveManager:BuildFolderTree()endlocal InterfaceManager ={}doInterfaceManager.Folder = "LimitHub"InterfaceManager.Settings ={Acrylic = true,Transparency = true,MenuKeybind = "K"}function InterfaceManager:SetTheme(name)InterfaceManager.Settings.Theme = nameendfunction InterfaceManager:SetFolder(folder)self.Folder = folder;self:BuildFolderTree()endfunction InterfaceManager:SetLibrary(library)self.Library = libraryendfunction InterfaceManager:BuildFolderTree()local paths ={}local parts = self.Folder:split("/")for idx = 1, #parts dopaths[#paths + 1] = table.concat(parts, "/", 1, idx)endtable.insert(paths, self.Folder)table.insert(paths, self.Folder .. "/")for i = 1, #paths dolocal str = paths[i]if not isfolder(str) thenmakefolder(str)endendendfunction InterfaceManager:SaveSettings()writefile(self.Folder .. "/limithub.json", httpService:JSONEncode(InterfaceManager.Settings))endfunction InterfaceManager:LoadSettings()local path = self.Folder .. "/limithub.json"if isfile(path) thenlocal data = readfile(path)local success, decoded = pcall(httpService.JSONDecode, httpService, data)if success thenfor i, v in next, decoded doInterfaceManager.Settings[i] = vendendendendfunction InterfaceManager:BuildInterfaceSection(tab)assert(self.Library, "Must set InterfaceManager.Library")local Library = self.Librarylocal Settings = InterfaceManager.SettingsInterfaceManager:LoadSettings()local section = tab:AddSection("Interface")local InterfaceTheme = section:AddDropdown("InterfaceTheme",{Title = "Theme",Description = "Changes the interface theme.",Values = Library.Themes,Default = self.Library.Theme,Callback = function(Value)Library:SetTheme(Value)Settings.Theme = ValueInterfaceManager:SaveSettings()end})InterfaceTheme:SetValue(Settings.Theme)if Library.UseAcrylic thensection:AddToggle("AcrylicToggle",{Title = "Acrylic",Description = "The blurred background requires graphic quality 8+",Default = Settings.Acrylic,Callback = function(Value)Library:ToggleAcrylic(Value)Settings.Acrylic = ValueInterfaceManager:SaveSettings()end})endsection:AddToggle("TransparentToggle",{Title = "Transparency",Description = "Makes the interface transparent.",Default = Settings.Transparency,Callback = function(Value)Library:ToggleTransparency(Value)Settings.Transparency = ValueInterfaceManager:SaveSettings()end})local MenuKeybind = section:AddKeybind("MenuKeybind",{Title = "Minimize Bind", Default = Settings.MenuKeybind})MenuKeybind:OnChanged(function()Settings.MenuKeybind = MenuKeybind.ValueInterfaceManager:SaveSettings()end)Library.MinimizeKeybind = MenuKeybindendendfunction Library:CreateWindow(Config)assert(Config.Title, "Window - Missing Title")if Library.Window thenprint("You cannot create more than one window.")returnendLibrary.UseAcrylic = Config.Acrylic or falseLibrary.Acrylic = Config.Acrylic or falseLibrary.Theme = Config.Theme or "LimitHub"if Config.Acrylic thenAcrylic.init()endlocal Window = Components.Window({Parent = GUI,Size = Config.Size,Title = Config.Title,SubTitle = Config.SubTitle,TabWidth = Config.TabWidth,})Library.Window = WindowInterfaceManager:SetTheme(Config.Theme)Library:SetTheme(Config.Theme)return Windowendfunction Library:SetTheme(Value)if Library.Window and table.find(Library.Themes, Value) thenLibrary.Theme = ValueCreator.UpdateTheme()endendfunction Library:Destroy()if Library.Window thenLibrary.Unloaded = trueif Library.UseAcrylic thenLibrary.Window.AcrylicPaint.Model:Destroy()endCreator.Disconnect()Library.GUI:Destroy()endendfunction Library:ToggleAcrylic(Value)if Library.Window thenif Library.UseAcrylic thenLibrary.Acrylic = ValueLibrary.Window.AcrylicPaint.Model.Transparency = Value and 0.98 or 1if Value thenAcrylic.Enable()elseAcrylic.Disable()endendendendfunction Library:ToggleTransparency(Value)if Library.Window thenLibrary.Window.AcrylicPaint.Frame.Background.BackgroundTransparency = Value and 0.35 or 0endendfunction Library:Notify(Config)return NotificationModule:New(Config)endif getgenv thengetgenv().Fluent = LibraryelseFluent = Libraryendreturn Library, SaveManager, InterfaceManager

